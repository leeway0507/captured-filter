// Code generated by ent, DO NOT EDIT.

package deliveryagency

import (
	"backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldLTE(FieldID, id))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldEQ(FieldCountry, v))
}

// VATReductionRate applies equality check predicate on the "VAT_reduction_rate" field. It's identical to VATReductionRateEQ.
func VATReductionRate(v float64) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldEQ(FieldVATReductionRate, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldEQ(FieldUpdatedAt, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldContainsFold(FieldCountry, v))
}

// VATReductionRateEQ applies the EQ predicate on the "VAT_reduction_rate" field.
func VATReductionRateEQ(v float64) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldEQ(FieldVATReductionRate, v))
}

// VATReductionRateNEQ applies the NEQ predicate on the "VAT_reduction_rate" field.
func VATReductionRateNEQ(v float64) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldNEQ(FieldVATReductionRate, v))
}

// VATReductionRateIn applies the In predicate on the "VAT_reduction_rate" field.
func VATReductionRateIn(vs ...float64) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldIn(FieldVATReductionRate, vs...))
}

// VATReductionRateNotIn applies the NotIn predicate on the "VAT_reduction_rate" field.
func VATReductionRateNotIn(vs ...float64) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldNotIn(FieldVATReductionRate, vs...))
}

// VATReductionRateGT applies the GT predicate on the "VAT_reduction_rate" field.
func VATReductionRateGT(v float64) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldGT(FieldVATReductionRate, v))
}

// VATReductionRateGTE applies the GTE predicate on the "VAT_reduction_rate" field.
func VATReductionRateGTE(v float64) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldGTE(FieldVATReductionRate, v))
}

// VATReductionRateLT applies the LT predicate on the "VAT_reduction_rate" field.
func VATReductionRateLT(v float64) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldLT(FieldVATReductionRate, v))
}

// VATReductionRateLTE applies the LTE predicate on the "VAT_reduction_rate" field.
func VATReductionRateLTE(v float64) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldLTE(FieldVATReductionRate, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProducts applies the HasEdge predicate on the "products" edge.
func HasProducts() predicate.DeliveryAgency {
	return predicate.DeliveryAgency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductsTable, ProductsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductsWith applies the HasEdge predicate on the "products" edge with a given conditions (other predicates).
func HasProductsWith(preds ...predicate.Product) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(func(s *sql.Selector) {
		step := newProductsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DeliveryAgency) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DeliveryAgency) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DeliveryAgency) predicate.DeliveryAgency {
	return predicate.DeliveryAgency(sql.NotPredicates(p))
}
