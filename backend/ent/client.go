// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"backend/ent/migrate"

	"backend/ent/deliveryagency"
	"backend/ent/product"
	"backend/ent/store"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// DeliveryAgency is the client for interacting with the DeliveryAgency builders.
	DeliveryAgency *DeliveryAgencyClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// Store is the client for interacting with the Store builders.
	Store *StoreClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.DeliveryAgency = NewDeliveryAgencyClient(c.config)
	c.Product = NewProductClient(c.config)
	c.Store = NewStoreClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		DeliveryAgency: NewDeliveryAgencyClient(cfg),
		Product:        NewProductClient(cfg),
		Store:          NewStoreClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		DeliveryAgency: NewDeliveryAgencyClient(cfg),
		Product:        NewProductClient(cfg),
		Store:          NewStoreClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		DeliveryAgency.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.DeliveryAgency.Use(hooks...)
	c.Product.Use(hooks...)
	c.Store.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.DeliveryAgency.Intercept(interceptors...)
	c.Product.Intercept(interceptors...)
	c.Store.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *DeliveryAgencyMutation:
		return c.DeliveryAgency.mutate(ctx, m)
	case *ProductMutation:
		return c.Product.mutate(ctx, m)
	case *StoreMutation:
		return c.Store.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// DeliveryAgencyClient is a client for the DeliveryAgency schema.
type DeliveryAgencyClient struct {
	config
}

// NewDeliveryAgencyClient returns a client for the DeliveryAgency from the given config.
func NewDeliveryAgencyClient(c config) *DeliveryAgencyClient {
	return &DeliveryAgencyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deliveryagency.Hooks(f(g(h())))`.
func (c *DeliveryAgencyClient) Use(hooks ...Hook) {
	c.hooks.DeliveryAgency = append(c.hooks.DeliveryAgency, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deliveryagency.Intercept(f(g(h())))`.
func (c *DeliveryAgencyClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeliveryAgency = append(c.inters.DeliveryAgency, interceptors...)
}

// Create returns a builder for creating a DeliveryAgency entity.
func (c *DeliveryAgencyClient) Create() *DeliveryAgencyCreate {
	mutation := newDeliveryAgencyMutation(c.config, OpCreate)
	return &DeliveryAgencyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeliveryAgency entities.
func (c *DeliveryAgencyClient) CreateBulk(builders ...*DeliveryAgencyCreate) *DeliveryAgencyCreateBulk {
	return &DeliveryAgencyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeliveryAgencyClient) MapCreateBulk(slice any, setFunc func(*DeliveryAgencyCreate, int)) *DeliveryAgencyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeliveryAgencyCreateBulk{err: fmt.Errorf("calling to DeliveryAgencyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeliveryAgencyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeliveryAgencyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeliveryAgency.
func (c *DeliveryAgencyClient) Update() *DeliveryAgencyUpdate {
	mutation := newDeliveryAgencyMutation(c.config, OpUpdate)
	return &DeliveryAgencyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeliveryAgencyClient) UpdateOne(da *DeliveryAgency) *DeliveryAgencyUpdateOne {
	mutation := newDeliveryAgencyMutation(c.config, OpUpdateOne, withDeliveryAgency(da))
	return &DeliveryAgencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeliveryAgencyClient) UpdateOneID(id int) *DeliveryAgencyUpdateOne {
	mutation := newDeliveryAgencyMutation(c.config, OpUpdateOne, withDeliveryAgencyID(id))
	return &DeliveryAgencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeliveryAgency.
func (c *DeliveryAgencyClient) Delete() *DeliveryAgencyDelete {
	mutation := newDeliveryAgencyMutation(c.config, OpDelete)
	return &DeliveryAgencyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeliveryAgencyClient) DeleteOne(da *DeliveryAgency) *DeliveryAgencyDeleteOne {
	return c.DeleteOneID(da.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeliveryAgencyClient) DeleteOneID(id int) *DeliveryAgencyDeleteOne {
	builder := c.Delete().Where(deliveryagency.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeliveryAgencyDeleteOne{builder}
}

// Query returns a query builder for DeliveryAgency.
func (c *DeliveryAgencyClient) Query() *DeliveryAgencyQuery {
	return &DeliveryAgencyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeliveryAgency},
		inters: c.Interceptors(),
	}
}

// Get returns a DeliveryAgency entity by its id.
func (c *DeliveryAgencyClient) Get(ctx context.Context, id int) (*DeliveryAgency, error) {
	return c.Query().Where(deliveryagency.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeliveryAgencyClient) GetX(ctx context.Context, id int) *DeliveryAgency {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProducts queries the products edge of a DeliveryAgency.
func (c *DeliveryAgencyClient) QueryProducts(da *DeliveryAgency) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := da.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryagency.Table, deliveryagency.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deliveryagency.ProductsTable, deliveryagency.ProductsColumn),
		)
		fromV = sqlgraph.Neighbors(da.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeliveryAgencyClient) Hooks() []Hook {
	return c.hooks.DeliveryAgency
}

// Interceptors returns the client interceptors.
func (c *DeliveryAgencyClient) Interceptors() []Interceptor {
	return c.inters.DeliveryAgency
}

func (c *DeliveryAgencyClient) mutate(ctx context.Context, m *DeliveryAgencyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeliveryAgencyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeliveryAgencyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeliveryAgencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeliveryAgencyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeliveryAgency mutation op: %q", m.Op())
	}
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `product.Intercept(f(g(h())))`.
func (c *ProductClient) Intercept(interceptors ...Interceptor) {
	c.inters.Product = append(c.inters.Product, interceptors...)
}

// Create returns a builder for creating a Product entity.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductClient) MapCreateBulk(slice any, setFunc func(*ProductCreate, int)) *ProductCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductCreateBulk{err: fmt.Errorf("calling to ProductClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id int) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductClient) DeleteOneID(id int) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProduct},
		inters: c.Interceptors(),
	}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id int) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id int) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// Interceptors returns the client interceptors.
func (c *ProductClient) Interceptors() []Interceptor {
	return c.inters.Product
}

func (c *ProductClient) mutate(ctx context.Context, m *ProductMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Product mutation op: %q", m.Op())
	}
}

// StoreClient is a client for the Store schema.
type StoreClient struct {
	config
}

// NewStoreClient returns a client for the Store from the given config.
func NewStoreClient(c config) *StoreClient {
	return &StoreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `store.Hooks(f(g(h())))`.
func (c *StoreClient) Use(hooks ...Hook) {
	c.hooks.Store = append(c.hooks.Store, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `store.Intercept(f(g(h())))`.
func (c *StoreClient) Intercept(interceptors ...Interceptor) {
	c.inters.Store = append(c.inters.Store, interceptors...)
}

// Create returns a builder for creating a Store entity.
func (c *StoreClient) Create() *StoreCreate {
	mutation := newStoreMutation(c.config, OpCreate)
	return &StoreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Store entities.
func (c *StoreClient) CreateBulk(builders ...*StoreCreate) *StoreCreateBulk {
	return &StoreCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StoreClient) MapCreateBulk(slice any, setFunc func(*StoreCreate, int)) *StoreCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StoreCreateBulk{err: fmt.Errorf("calling to StoreClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StoreCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StoreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Store.
func (c *StoreClient) Update() *StoreUpdate {
	mutation := newStoreMutation(c.config, OpUpdate)
	return &StoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StoreClient) UpdateOne(s *Store) *StoreUpdateOne {
	mutation := newStoreMutation(c.config, OpUpdateOne, withStore(s))
	return &StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StoreClient) UpdateOneID(id int) *StoreUpdateOne {
	mutation := newStoreMutation(c.config, OpUpdateOne, withStoreID(id))
	return &StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Store.
func (c *StoreClient) Delete() *StoreDelete {
	mutation := newStoreMutation(c.config, OpDelete)
	return &StoreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StoreClient) DeleteOne(s *Store) *StoreDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StoreClient) DeleteOneID(id int) *StoreDeleteOne {
	builder := c.Delete().Where(store.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StoreDeleteOne{builder}
}

// Query returns a query builder for Store.
func (c *StoreClient) Query() *StoreQuery {
	return &StoreQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStore},
		inters: c.Interceptors(),
	}
}

// Get returns a Store entity by its id.
func (c *StoreClient) Get(ctx context.Context, id int) (*Store, error) {
	return c.Query().Where(store.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StoreClient) GetX(ctx context.Context, id int) *Store {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProducts queries the products edge of a Store.
func (c *StoreClient) QueryProducts(s *Store) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.ProductsTable, store.ProductsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StoreClient) Hooks() []Hook {
	return c.hooks.Store
}

// Interceptors returns the client interceptors.
func (c *StoreClient) Interceptors() []Interceptor {
	return c.inters.Store
}

func (c *StoreClient) mutate(ctx context.Context, m *StoreMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StoreCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StoreUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StoreDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Store mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		DeliveryAgency, Product, Store []ent.Hook
	}
	inters struct {
		DeliveryAgency, Product, Store []ent.Interceptor
	}
)
