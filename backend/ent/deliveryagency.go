// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/deliveryagency"
	"backend/ent/schema"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DeliveryAgency is the model entity for the DeliveryAgency schema.
type DeliveryAgency struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// VATReductionRate holds the value of the "VAT_reduction_rate" field.
	VATReductionRate float64 `json:"VAT_reduction_rate,omitempty"`
	// ShippingFee holds the value of the "shipping_fee" field.
	ShippingFee *schema.AgencyShippingFee `json:"shipping_fee,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeliveryAgency) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deliveryagency.FieldShippingFee:
			values[i] = new([]byte)
		case deliveryagency.FieldVATReductionRate:
			values[i] = new(sql.NullFloat64)
		case deliveryagency.FieldID:
			values[i] = new(sql.NullInt64)
		case deliveryagency.FieldCountry:
			values[i] = new(sql.NullString)
		case deliveryagency.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeliveryAgency fields.
func (da *DeliveryAgency) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deliveryagency.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			da.ID = int(value.Int64)
		case deliveryagency.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				da.Country = value.String
			}
		case deliveryagency.FieldVATReductionRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field VAT_reduction_rate", values[i])
			} else if value.Valid {
				da.VATReductionRate = value.Float64
			}
		case deliveryagency.FieldShippingFee:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_fee", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &da.ShippingFee); err != nil {
					return fmt.Errorf("unmarshal field shipping_fee: %w", err)
				}
			}
		case deliveryagency.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				da.UpdatedAt = value.Time
			}
		default:
			da.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeliveryAgency.
// This includes values selected through modifiers, order, etc.
func (da *DeliveryAgency) Value(name string) (ent.Value, error) {
	return da.selectValues.Get(name)
}

// Update returns a builder for updating this DeliveryAgency.
// Note that you need to call DeliveryAgency.Unwrap() before calling this method if this DeliveryAgency
// was returned from a transaction, and the transaction was committed or rolled back.
func (da *DeliveryAgency) Update() *DeliveryAgencyUpdateOne {
	return NewDeliveryAgencyClient(da.config).UpdateOne(da)
}

// Unwrap unwraps the DeliveryAgency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (da *DeliveryAgency) Unwrap() *DeliveryAgency {
	_tx, ok := da.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeliveryAgency is not a transactional entity")
	}
	da.config.driver = _tx.drv
	return da
}

// String implements the fmt.Stringer.
func (da *DeliveryAgency) String() string {
	var builder strings.Builder
	builder.WriteString("DeliveryAgency(")
	builder.WriteString(fmt.Sprintf("id=%v, ", da.ID))
	builder.WriteString("country=")
	builder.WriteString(da.Country)
	builder.WriteString(", ")
	builder.WriteString("VAT_reduction_rate=")
	builder.WriteString(fmt.Sprintf("%v", da.VATReductionRate))
	builder.WriteString(", ")
	builder.WriteString("shipping_fee=")
	builder.WriteString(fmt.Sprintf("%v", da.ShippingFee))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(da.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DeliveryAgencies is a parsable slice of DeliveryAgency.
type DeliveryAgencies []*DeliveryAgency
