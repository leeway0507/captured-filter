// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/product"
	"backend/ent/store"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStoreName sets the "store_name" field.
func (pc *ProductCreate) SetStoreName(s string) *ProductCreate {
	pc.mutation.SetStoreName(s)
	return pc
}

// SetNillableStoreName sets the "store_name" field if the given value is not nil.
func (pc *ProductCreate) SetNillableStoreName(s *string) *ProductCreate {
	if s != nil {
		pc.SetStoreName(*s)
	}
	return pc
}

// SetBrand sets the "brand" field.
func (pc *ProductCreate) SetBrand(s string) *ProductCreate {
	pc.mutation.SetBrand(s)
	return pc
}

// SetProductName sets the "product_name" field.
func (pc *ProductCreate) SetProductName(s string) *ProductCreate {
	pc.mutation.SetProductName(s)
	return pc
}

// SetProductImgURL sets the "product_img_url" field.
func (pc *ProductCreate) SetProductImgURL(s string) *ProductCreate {
	pc.mutation.SetProductImgURL(s)
	return pc
}

// SetProductURL sets the "product_url" field.
func (pc *ProductCreate) SetProductURL(s string) *ProductCreate {
	pc.mutation.SetProductURL(s)
	return pc
}

// SetCurrencyCode sets the "currency_code" field.
func (pc *ProductCreate) SetCurrencyCode(s string) *ProductCreate {
	pc.mutation.SetCurrencyCode(s)
	return pc
}

// SetRetailPrice sets the "retail_price" field.
func (pc *ProductCreate) SetRetailPrice(f float64) *ProductCreate {
	pc.mutation.SetRetailPrice(f)
	return pc
}

// SetSalePrice sets the "sale_price" field.
func (pc *ProductCreate) SetSalePrice(f float64) *ProductCreate {
	pc.mutation.SetSalePrice(f)
	return pc
}

// SetIsSale sets the "is_sale" field.
func (pc *ProductCreate) SetIsSale(b bool) *ProductCreate {
	pc.mutation.SetIsSale(b)
	return pc
}

// SetMadeIn sets the "made_in" field.
func (pc *ProductCreate) SetMadeIn(s string) *ProductCreate {
	pc.mutation.SetMadeIn(s)
	return pc
}

// SetNillableMadeIn sets the "made_in" field if the given value is not nil.
func (pc *ProductCreate) SetNillableMadeIn(s *string) *ProductCreate {
	if s != nil {
		pc.SetMadeIn(*s)
	}
	return pc
}

// SetKorBrand sets the "kor_brand" field.
func (pc *ProductCreate) SetKorBrand(s string) *ProductCreate {
	pc.mutation.SetKorBrand(s)
	return pc
}

// SetNillableKorBrand sets the "kor_brand" field if the given value is not nil.
func (pc *ProductCreate) SetNillableKorBrand(s *string) *ProductCreate {
	if s != nil {
		pc.SetKorBrand(*s)
	}
	return pc
}

// SetKorProductName sets the "kor_product_name" field.
func (pc *ProductCreate) SetKorProductName(s string) *ProductCreate {
	pc.mutation.SetKorProductName(s)
	return pc
}

// SetNillableKorProductName sets the "kor_product_name" field if the given value is not nil.
func (pc *ProductCreate) SetNillableKorProductName(s *string) *ProductCreate {
	if s != nil {
		pc.SetKorProductName(*s)
	}
	return pc
}

// SetProductID sets the "product_id" field.
func (pc *ProductCreate) SetProductID(s string) *ProductCreate {
	pc.mutation.SetProductID(s)
	return pc
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableProductID(s *string) *ProductCreate {
	if s != nil {
		pc.SetProductID(*s)
	}
	return pc
}

// SetGender sets the "gender" field.
func (pc *ProductCreate) SetGender(s string) *ProductCreate {
	pc.mutation.SetGender(s)
	return pc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (pc *ProductCreate) SetNillableGender(s *string) *ProductCreate {
	if s != nil {
		pc.SetGender(*s)
	}
	return pc
}

// SetColor sets the "color" field.
func (pc *ProductCreate) SetColor(s string) *ProductCreate {
	pc.mutation.SetColor(s)
	return pc
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (pc *ProductCreate) SetNillableColor(s *string) *ProductCreate {
	if s != nil {
		pc.SetColor(*s)
	}
	return pc
}

// SetCategory sets the "category" field.
func (pc *ProductCreate) SetCategory(s string) *ProductCreate {
	pc.mutation.SetCategory(s)
	return pc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pc *ProductCreate) SetNillableCategory(s *string) *ProductCreate {
	if s != nil {
		pc.SetCategory(*s)
	}
	return pc
}

// SetCategorySpec sets the "category_spec" field.
func (pc *ProductCreate) SetCategorySpec(s string) *ProductCreate {
	pc.mutation.SetCategorySpec(s)
	return pc
}

// SetNillableCategorySpec sets the "category_spec" field if the given value is not nil.
func (pc *ProductCreate) SetNillableCategorySpec(s *string) *ProductCreate {
	if s != nil {
		pc.SetCategorySpec(*s)
	}
	return pc
}

// SetSoldOut sets the "sold_out" field.
func (pc *ProductCreate) SetSoldOut(b bool) *ProductCreate {
	pc.mutation.SetSoldOut(b)
	return pc
}

// SetNillableSoldOut sets the "sold_out" field if the given value is not nil.
func (pc *ProductCreate) SetNillableSoldOut(b *bool) *ProductCreate {
	if b != nil {
		pc.SetSoldOut(*b)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProductCreate) SetUpdatedAt(t time.Time) *ProductCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableUpdatedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetStoreID sets the "store" edge to the Store entity by ID.
func (pc *ProductCreate) SetStoreID(id string) *ProductCreate {
	pc.mutation.SetStoreID(id)
	return pc
}

// SetNillableStoreID sets the "store" edge to the Store entity by ID if the given value is not nil.
func (pc *ProductCreate) SetNillableStoreID(id *string) *ProductCreate {
	if id != nil {
		pc = pc.SetStoreID(*id)
	}
	return pc
}

// SetStore sets the "store" edge to the Store entity.
func (pc *ProductCreate) SetStore(s *Store) *ProductCreate {
	return pc.SetStoreID(s.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProductCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProductCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProductCreate) defaults() {
	if _, ok := pc.mutation.SoldOut(); !ok {
		v := product.DefaultSoldOut
		pc.mutation.SetSoldOut(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := product.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProductCreate) check() error {
	if _, ok := pc.mutation.Brand(); !ok {
		return &ValidationError{Name: "brand", err: errors.New(`ent: missing required field "Product.brand"`)}
	}
	if _, ok := pc.mutation.ProductName(); !ok {
		return &ValidationError{Name: "product_name", err: errors.New(`ent: missing required field "Product.product_name"`)}
	}
	if _, ok := pc.mutation.ProductImgURL(); !ok {
		return &ValidationError{Name: "product_img_url", err: errors.New(`ent: missing required field "Product.product_img_url"`)}
	}
	if _, ok := pc.mutation.ProductURL(); !ok {
		return &ValidationError{Name: "product_url", err: errors.New(`ent: missing required field "Product.product_url"`)}
	}
	if _, ok := pc.mutation.CurrencyCode(); !ok {
		return &ValidationError{Name: "currency_code", err: errors.New(`ent: missing required field "Product.currency_code"`)}
	}
	if _, ok := pc.mutation.RetailPrice(); !ok {
		return &ValidationError{Name: "retail_price", err: errors.New(`ent: missing required field "Product.retail_price"`)}
	}
	if _, ok := pc.mutation.SalePrice(); !ok {
		return &ValidationError{Name: "sale_price", err: errors.New(`ent: missing required field "Product.sale_price"`)}
	}
	if _, ok := pc.mutation.IsSale(); !ok {
		return &ValidationError{Name: "is_sale", err: errors.New(`ent: missing required field "Product.is_sale"`)}
	}
	if _, ok := pc.mutation.SoldOut(); !ok {
		return &ValidationError{Name: "sold_out", err: errors.New(`ent: missing required field "Product.sold_out"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Product.updated_at"`)}
	}
	return nil
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		_node = &Product{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(product.Table, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.Brand(); ok {
		_spec.SetField(product.FieldBrand, field.TypeString, value)
		_node.Brand = value
	}
	if value, ok := pc.mutation.ProductName(); ok {
		_spec.SetField(product.FieldProductName, field.TypeString, value)
		_node.ProductName = value
	}
	if value, ok := pc.mutation.ProductImgURL(); ok {
		_spec.SetField(product.FieldProductImgURL, field.TypeString, value)
		_node.ProductImgURL = value
	}
	if value, ok := pc.mutation.ProductURL(); ok {
		_spec.SetField(product.FieldProductURL, field.TypeString, value)
		_node.ProductURL = value
	}
	if value, ok := pc.mutation.CurrencyCode(); ok {
		_spec.SetField(product.FieldCurrencyCode, field.TypeString, value)
		_node.CurrencyCode = value
	}
	if value, ok := pc.mutation.RetailPrice(); ok {
		_spec.SetField(product.FieldRetailPrice, field.TypeFloat64, value)
		_node.RetailPrice = value
	}
	if value, ok := pc.mutation.SalePrice(); ok {
		_spec.SetField(product.FieldSalePrice, field.TypeFloat64, value)
		_node.SalePrice = value
	}
	if value, ok := pc.mutation.IsSale(); ok {
		_spec.SetField(product.FieldIsSale, field.TypeBool, value)
		_node.IsSale = value
	}
	if value, ok := pc.mutation.MadeIn(); ok {
		_spec.SetField(product.FieldMadeIn, field.TypeString, value)
		_node.MadeIn = value
	}
	if value, ok := pc.mutation.KorBrand(); ok {
		_spec.SetField(product.FieldKorBrand, field.TypeString, value)
		_node.KorBrand = value
	}
	if value, ok := pc.mutation.KorProductName(); ok {
		_spec.SetField(product.FieldKorProductName, field.TypeString, value)
		_node.KorProductName = value
	}
	if value, ok := pc.mutation.ProductID(); ok {
		_spec.SetField(product.FieldProductID, field.TypeString, value)
		_node.ProductID = value
	}
	if value, ok := pc.mutation.Gender(); ok {
		_spec.SetField(product.FieldGender, field.TypeString, value)
		_node.Gender = value
	}
	if value, ok := pc.mutation.Color(); ok {
		_spec.SetField(product.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	if value, ok := pc.mutation.Category(); ok {
		_spec.SetField(product.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := pc.mutation.CategorySpec(); ok {
		_spec.SetField(product.FieldCategorySpec, field.TypeString, value)
		_node.CategorySpec = value
	}
	if value, ok := pc.mutation.SoldOut(); ok {
		_spec.SetField(product.FieldSoldOut, field.TypeBool, value)
		_node.SoldOut = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pc.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.StoreTable,
			Columns: []string{product.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StoreName = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Product.Create().
//		SetStoreName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductUpsert) {
//			SetStoreName(v+v).
//		}).
//		Exec(ctx)
func (pc *ProductCreate) OnConflict(opts ...sql.ConflictOption) *ProductUpsertOne {
	pc.conflict = opts
	return &ProductUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *ProductCreate) OnConflictColumns(columns ...string) *ProductUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &ProductUpsertOne{
		create: pc,
	}
}

type (
	// ProductUpsertOne is the builder for "upsert"-ing
	//  one Product node.
	ProductUpsertOne struct {
		create *ProductCreate
	}

	// ProductUpsert is the "OnConflict" setter.
	ProductUpsert struct {
		*sql.UpdateSet
	}
)

// SetStoreName sets the "store_name" field.
func (u *ProductUpsert) SetStoreName(v string) *ProductUpsert {
	u.Set(product.FieldStoreName, v)
	return u
}

// UpdateStoreName sets the "store_name" field to the value that was provided on create.
func (u *ProductUpsert) UpdateStoreName() *ProductUpsert {
	u.SetExcluded(product.FieldStoreName)
	return u
}

// ClearStoreName clears the value of the "store_name" field.
func (u *ProductUpsert) ClearStoreName() *ProductUpsert {
	u.SetNull(product.FieldStoreName)
	return u
}

// SetBrand sets the "brand" field.
func (u *ProductUpsert) SetBrand(v string) *ProductUpsert {
	u.Set(product.FieldBrand, v)
	return u
}

// UpdateBrand sets the "brand" field to the value that was provided on create.
func (u *ProductUpsert) UpdateBrand() *ProductUpsert {
	u.SetExcluded(product.FieldBrand)
	return u
}

// SetProductName sets the "product_name" field.
func (u *ProductUpsert) SetProductName(v string) *ProductUpsert {
	u.Set(product.FieldProductName, v)
	return u
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *ProductUpsert) UpdateProductName() *ProductUpsert {
	u.SetExcluded(product.FieldProductName)
	return u
}

// SetProductImgURL sets the "product_img_url" field.
func (u *ProductUpsert) SetProductImgURL(v string) *ProductUpsert {
	u.Set(product.FieldProductImgURL, v)
	return u
}

// UpdateProductImgURL sets the "product_img_url" field to the value that was provided on create.
func (u *ProductUpsert) UpdateProductImgURL() *ProductUpsert {
	u.SetExcluded(product.FieldProductImgURL)
	return u
}

// SetProductURL sets the "product_url" field.
func (u *ProductUpsert) SetProductURL(v string) *ProductUpsert {
	u.Set(product.FieldProductURL, v)
	return u
}

// UpdateProductURL sets the "product_url" field to the value that was provided on create.
func (u *ProductUpsert) UpdateProductURL() *ProductUpsert {
	u.SetExcluded(product.FieldProductURL)
	return u
}

// SetCurrencyCode sets the "currency_code" field.
func (u *ProductUpsert) SetCurrencyCode(v string) *ProductUpsert {
	u.Set(product.FieldCurrencyCode, v)
	return u
}

// UpdateCurrencyCode sets the "currency_code" field to the value that was provided on create.
func (u *ProductUpsert) UpdateCurrencyCode() *ProductUpsert {
	u.SetExcluded(product.FieldCurrencyCode)
	return u
}

// SetRetailPrice sets the "retail_price" field.
func (u *ProductUpsert) SetRetailPrice(v float64) *ProductUpsert {
	u.Set(product.FieldRetailPrice, v)
	return u
}

// UpdateRetailPrice sets the "retail_price" field to the value that was provided on create.
func (u *ProductUpsert) UpdateRetailPrice() *ProductUpsert {
	u.SetExcluded(product.FieldRetailPrice)
	return u
}

// AddRetailPrice adds v to the "retail_price" field.
func (u *ProductUpsert) AddRetailPrice(v float64) *ProductUpsert {
	u.Add(product.FieldRetailPrice, v)
	return u
}

// SetSalePrice sets the "sale_price" field.
func (u *ProductUpsert) SetSalePrice(v float64) *ProductUpsert {
	u.Set(product.FieldSalePrice, v)
	return u
}

// UpdateSalePrice sets the "sale_price" field to the value that was provided on create.
func (u *ProductUpsert) UpdateSalePrice() *ProductUpsert {
	u.SetExcluded(product.FieldSalePrice)
	return u
}

// AddSalePrice adds v to the "sale_price" field.
func (u *ProductUpsert) AddSalePrice(v float64) *ProductUpsert {
	u.Add(product.FieldSalePrice, v)
	return u
}

// SetIsSale sets the "is_sale" field.
func (u *ProductUpsert) SetIsSale(v bool) *ProductUpsert {
	u.Set(product.FieldIsSale, v)
	return u
}

// UpdateIsSale sets the "is_sale" field to the value that was provided on create.
func (u *ProductUpsert) UpdateIsSale() *ProductUpsert {
	u.SetExcluded(product.FieldIsSale)
	return u
}

// SetMadeIn sets the "made_in" field.
func (u *ProductUpsert) SetMadeIn(v string) *ProductUpsert {
	u.Set(product.FieldMadeIn, v)
	return u
}

// UpdateMadeIn sets the "made_in" field to the value that was provided on create.
func (u *ProductUpsert) UpdateMadeIn() *ProductUpsert {
	u.SetExcluded(product.FieldMadeIn)
	return u
}

// ClearMadeIn clears the value of the "made_in" field.
func (u *ProductUpsert) ClearMadeIn() *ProductUpsert {
	u.SetNull(product.FieldMadeIn)
	return u
}

// SetKorBrand sets the "kor_brand" field.
func (u *ProductUpsert) SetKorBrand(v string) *ProductUpsert {
	u.Set(product.FieldKorBrand, v)
	return u
}

// UpdateKorBrand sets the "kor_brand" field to the value that was provided on create.
func (u *ProductUpsert) UpdateKorBrand() *ProductUpsert {
	u.SetExcluded(product.FieldKorBrand)
	return u
}

// ClearKorBrand clears the value of the "kor_brand" field.
func (u *ProductUpsert) ClearKorBrand() *ProductUpsert {
	u.SetNull(product.FieldKorBrand)
	return u
}

// SetKorProductName sets the "kor_product_name" field.
func (u *ProductUpsert) SetKorProductName(v string) *ProductUpsert {
	u.Set(product.FieldKorProductName, v)
	return u
}

// UpdateKorProductName sets the "kor_product_name" field to the value that was provided on create.
func (u *ProductUpsert) UpdateKorProductName() *ProductUpsert {
	u.SetExcluded(product.FieldKorProductName)
	return u
}

// ClearKorProductName clears the value of the "kor_product_name" field.
func (u *ProductUpsert) ClearKorProductName() *ProductUpsert {
	u.SetNull(product.FieldKorProductName)
	return u
}

// SetProductID sets the "product_id" field.
func (u *ProductUpsert) SetProductID(v string) *ProductUpsert {
	u.Set(product.FieldProductID, v)
	return u
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *ProductUpsert) UpdateProductID() *ProductUpsert {
	u.SetExcluded(product.FieldProductID)
	return u
}

// ClearProductID clears the value of the "product_id" field.
func (u *ProductUpsert) ClearProductID() *ProductUpsert {
	u.SetNull(product.FieldProductID)
	return u
}

// SetGender sets the "gender" field.
func (u *ProductUpsert) SetGender(v string) *ProductUpsert {
	u.Set(product.FieldGender, v)
	return u
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *ProductUpsert) UpdateGender() *ProductUpsert {
	u.SetExcluded(product.FieldGender)
	return u
}

// ClearGender clears the value of the "gender" field.
func (u *ProductUpsert) ClearGender() *ProductUpsert {
	u.SetNull(product.FieldGender)
	return u
}

// SetColor sets the "color" field.
func (u *ProductUpsert) SetColor(v string) *ProductUpsert {
	u.Set(product.FieldColor, v)
	return u
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *ProductUpsert) UpdateColor() *ProductUpsert {
	u.SetExcluded(product.FieldColor)
	return u
}

// ClearColor clears the value of the "color" field.
func (u *ProductUpsert) ClearColor() *ProductUpsert {
	u.SetNull(product.FieldColor)
	return u
}

// SetCategory sets the "category" field.
func (u *ProductUpsert) SetCategory(v string) *ProductUpsert {
	u.Set(product.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *ProductUpsert) UpdateCategory() *ProductUpsert {
	u.SetExcluded(product.FieldCategory)
	return u
}

// ClearCategory clears the value of the "category" field.
func (u *ProductUpsert) ClearCategory() *ProductUpsert {
	u.SetNull(product.FieldCategory)
	return u
}

// SetCategorySpec sets the "category_spec" field.
func (u *ProductUpsert) SetCategorySpec(v string) *ProductUpsert {
	u.Set(product.FieldCategorySpec, v)
	return u
}

// UpdateCategorySpec sets the "category_spec" field to the value that was provided on create.
func (u *ProductUpsert) UpdateCategorySpec() *ProductUpsert {
	u.SetExcluded(product.FieldCategorySpec)
	return u
}

// ClearCategorySpec clears the value of the "category_spec" field.
func (u *ProductUpsert) ClearCategorySpec() *ProductUpsert {
	u.SetNull(product.FieldCategorySpec)
	return u
}

// SetSoldOut sets the "sold_out" field.
func (u *ProductUpsert) SetSoldOut(v bool) *ProductUpsert {
	u.Set(product.FieldSoldOut, v)
	return u
}

// UpdateSoldOut sets the "sold_out" field to the value that was provided on create.
func (u *ProductUpsert) UpdateSoldOut() *ProductUpsert {
	u.SetExcluded(product.FieldSoldOut)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductUpsert) SetUpdatedAt(v time.Time) *ProductUpsert {
	u.Set(product.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductUpsert) UpdateUpdatedAt() *ProductUpsert {
	u.SetExcluded(product.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProductUpsertOne) UpdateNewValues() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProductUpsertOne) Ignore() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductUpsertOne) DoNothing() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductCreate.OnConflict
// documentation for more info.
func (u *ProductUpsertOne) Update(set func(*ProductUpsert)) *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductUpsert{UpdateSet: update})
	}))
	return u
}

// SetStoreName sets the "store_name" field.
func (u *ProductUpsertOne) SetStoreName(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetStoreName(v)
	})
}

// UpdateStoreName sets the "store_name" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateStoreName() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateStoreName()
	})
}

// ClearStoreName clears the value of the "store_name" field.
func (u *ProductUpsertOne) ClearStoreName() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearStoreName()
	})
}

// SetBrand sets the "brand" field.
func (u *ProductUpsertOne) SetBrand(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetBrand(v)
	})
}

// UpdateBrand sets the "brand" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateBrand() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateBrand()
	})
}

// SetProductName sets the "product_name" field.
func (u *ProductUpsertOne) SetProductName(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetProductName(v)
	})
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateProductName() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateProductName()
	})
}

// SetProductImgURL sets the "product_img_url" field.
func (u *ProductUpsertOne) SetProductImgURL(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetProductImgURL(v)
	})
}

// UpdateProductImgURL sets the "product_img_url" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateProductImgURL() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateProductImgURL()
	})
}

// SetProductURL sets the "product_url" field.
func (u *ProductUpsertOne) SetProductURL(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetProductURL(v)
	})
}

// UpdateProductURL sets the "product_url" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateProductURL() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateProductURL()
	})
}

// SetCurrencyCode sets the "currency_code" field.
func (u *ProductUpsertOne) SetCurrencyCode(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetCurrencyCode(v)
	})
}

// UpdateCurrencyCode sets the "currency_code" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateCurrencyCode() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateCurrencyCode()
	})
}

// SetRetailPrice sets the "retail_price" field.
func (u *ProductUpsertOne) SetRetailPrice(v float64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetRetailPrice(v)
	})
}

// AddRetailPrice adds v to the "retail_price" field.
func (u *ProductUpsertOne) AddRetailPrice(v float64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddRetailPrice(v)
	})
}

// UpdateRetailPrice sets the "retail_price" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateRetailPrice() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateRetailPrice()
	})
}

// SetSalePrice sets the "sale_price" field.
func (u *ProductUpsertOne) SetSalePrice(v float64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetSalePrice(v)
	})
}

// AddSalePrice adds v to the "sale_price" field.
func (u *ProductUpsertOne) AddSalePrice(v float64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddSalePrice(v)
	})
}

// UpdateSalePrice sets the "sale_price" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateSalePrice() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateSalePrice()
	})
}

// SetIsSale sets the "is_sale" field.
func (u *ProductUpsertOne) SetIsSale(v bool) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetIsSale(v)
	})
}

// UpdateIsSale sets the "is_sale" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateIsSale() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateIsSale()
	})
}

// SetMadeIn sets the "made_in" field.
func (u *ProductUpsertOne) SetMadeIn(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetMadeIn(v)
	})
}

// UpdateMadeIn sets the "made_in" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateMadeIn() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateMadeIn()
	})
}

// ClearMadeIn clears the value of the "made_in" field.
func (u *ProductUpsertOne) ClearMadeIn() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearMadeIn()
	})
}

// SetKorBrand sets the "kor_brand" field.
func (u *ProductUpsertOne) SetKorBrand(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetKorBrand(v)
	})
}

// UpdateKorBrand sets the "kor_brand" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateKorBrand() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateKorBrand()
	})
}

// ClearKorBrand clears the value of the "kor_brand" field.
func (u *ProductUpsertOne) ClearKorBrand() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearKorBrand()
	})
}

// SetKorProductName sets the "kor_product_name" field.
func (u *ProductUpsertOne) SetKorProductName(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetKorProductName(v)
	})
}

// UpdateKorProductName sets the "kor_product_name" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateKorProductName() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateKorProductName()
	})
}

// ClearKorProductName clears the value of the "kor_product_name" field.
func (u *ProductUpsertOne) ClearKorProductName() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearKorProductName()
	})
}

// SetProductID sets the "product_id" field.
func (u *ProductUpsertOne) SetProductID(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateProductID() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateProductID()
	})
}

// ClearProductID clears the value of the "product_id" field.
func (u *ProductUpsertOne) ClearProductID() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearProductID()
	})
}

// SetGender sets the "gender" field.
func (u *ProductUpsertOne) SetGender(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateGender() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateGender()
	})
}

// ClearGender clears the value of the "gender" field.
func (u *ProductUpsertOne) ClearGender() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearGender()
	})
}

// SetColor sets the "color" field.
func (u *ProductUpsertOne) SetColor(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetColor(v)
	})
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateColor() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateColor()
	})
}

// ClearColor clears the value of the "color" field.
func (u *ProductUpsertOne) ClearColor() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearColor()
	})
}

// SetCategory sets the "category" field.
func (u *ProductUpsertOne) SetCategory(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateCategory() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateCategory()
	})
}

// ClearCategory clears the value of the "category" field.
func (u *ProductUpsertOne) ClearCategory() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearCategory()
	})
}

// SetCategorySpec sets the "category_spec" field.
func (u *ProductUpsertOne) SetCategorySpec(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetCategorySpec(v)
	})
}

// UpdateCategorySpec sets the "category_spec" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateCategorySpec() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateCategorySpec()
	})
}

// ClearCategorySpec clears the value of the "category_spec" field.
func (u *ProductUpsertOne) ClearCategorySpec() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearCategorySpec()
	})
}

// SetSoldOut sets the "sold_out" field.
func (u *ProductUpsertOne) SetSoldOut(v bool) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetSoldOut(v)
	})
}

// UpdateSoldOut sets the "sold_out" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateSoldOut() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateSoldOut()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductUpsertOne) SetUpdatedAt(v time.Time) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateUpdatedAt() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ProductUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProductCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProductUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProductUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProductCreateBulk is the builder for creating many Product entities in bulk.
type ProductCreateBulk struct {
	config
	err      error
	builders []*ProductCreate
	conflict []sql.ConflictOption
}

// Save creates the Product entities in the database.
func (pcb *ProductCreateBulk) Save(ctx context.Context) ([]*Product, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Product, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProductCreateBulk) SaveX(ctx context.Context) []*Product {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProductCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProductCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Product.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductUpsert) {
//			SetStoreName(v+v).
//		}).
//		Exec(ctx)
func (pcb *ProductCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProductUpsertBulk {
	pcb.conflict = opts
	return &ProductUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *ProductCreateBulk) OnConflictColumns(columns ...string) *ProductUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &ProductUpsertBulk{
		create: pcb,
	}
}

// ProductUpsertBulk is the builder for "upsert"-ing
// a bulk of Product nodes.
type ProductUpsertBulk struct {
	create *ProductCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProductUpsertBulk) UpdateNewValues() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProductUpsertBulk) Ignore() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductUpsertBulk) DoNothing() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductCreateBulk.OnConflict
// documentation for more info.
func (u *ProductUpsertBulk) Update(set func(*ProductUpsert)) *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductUpsert{UpdateSet: update})
	}))
	return u
}

// SetStoreName sets the "store_name" field.
func (u *ProductUpsertBulk) SetStoreName(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetStoreName(v)
	})
}

// UpdateStoreName sets the "store_name" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateStoreName() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateStoreName()
	})
}

// ClearStoreName clears the value of the "store_name" field.
func (u *ProductUpsertBulk) ClearStoreName() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearStoreName()
	})
}

// SetBrand sets the "brand" field.
func (u *ProductUpsertBulk) SetBrand(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetBrand(v)
	})
}

// UpdateBrand sets the "brand" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateBrand() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateBrand()
	})
}

// SetProductName sets the "product_name" field.
func (u *ProductUpsertBulk) SetProductName(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetProductName(v)
	})
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateProductName() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateProductName()
	})
}

// SetProductImgURL sets the "product_img_url" field.
func (u *ProductUpsertBulk) SetProductImgURL(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetProductImgURL(v)
	})
}

// UpdateProductImgURL sets the "product_img_url" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateProductImgURL() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateProductImgURL()
	})
}

// SetProductURL sets the "product_url" field.
func (u *ProductUpsertBulk) SetProductURL(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetProductURL(v)
	})
}

// UpdateProductURL sets the "product_url" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateProductURL() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateProductURL()
	})
}

// SetCurrencyCode sets the "currency_code" field.
func (u *ProductUpsertBulk) SetCurrencyCode(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetCurrencyCode(v)
	})
}

// UpdateCurrencyCode sets the "currency_code" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateCurrencyCode() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateCurrencyCode()
	})
}

// SetRetailPrice sets the "retail_price" field.
func (u *ProductUpsertBulk) SetRetailPrice(v float64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetRetailPrice(v)
	})
}

// AddRetailPrice adds v to the "retail_price" field.
func (u *ProductUpsertBulk) AddRetailPrice(v float64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddRetailPrice(v)
	})
}

// UpdateRetailPrice sets the "retail_price" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateRetailPrice() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateRetailPrice()
	})
}

// SetSalePrice sets the "sale_price" field.
func (u *ProductUpsertBulk) SetSalePrice(v float64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetSalePrice(v)
	})
}

// AddSalePrice adds v to the "sale_price" field.
func (u *ProductUpsertBulk) AddSalePrice(v float64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddSalePrice(v)
	})
}

// UpdateSalePrice sets the "sale_price" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateSalePrice() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateSalePrice()
	})
}

// SetIsSale sets the "is_sale" field.
func (u *ProductUpsertBulk) SetIsSale(v bool) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetIsSale(v)
	})
}

// UpdateIsSale sets the "is_sale" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateIsSale() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateIsSale()
	})
}

// SetMadeIn sets the "made_in" field.
func (u *ProductUpsertBulk) SetMadeIn(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetMadeIn(v)
	})
}

// UpdateMadeIn sets the "made_in" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateMadeIn() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateMadeIn()
	})
}

// ClearMadeIn clears the value of the "made_in" field.
func (u *ProductUpsertBulk) ClearMadeIn() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearMadeIn()
	})
}

// SetKorBrand sets the "kor_brand" field.
func (u *ProductUpsertBulk) SetKorBrand(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetKorBrand(v)
	})
}

// UpdateKorBrand sets the "kor_brand" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateKorBrand() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateKorBrand()
	})
}

// ClearKorBrand clears the value of the "kor_brand" field.
func (u *ProductUpsertBulk) ClearKorBrand() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearKorBrand()
	})
}

// SetKorProductName sets the "kor_product_name" field.
func (u *ProductUpsertBulk) SetKorProductName(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetKorProductName(v)
	})
}

// UpdateKorProductName sets the "kor_product_name" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateKorProductName() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateKorProductName()
	})
}

// ClearKorProductName clears the value of the "kor_product_name" field.
func (u *ProductUpsertBulk) ClearKorProductName() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearKorProductName()
	})
}

// SetProductID sets the "product_id" field.
func (u *ProductUpsertBulk) SetProductID(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateProductID() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateProductID()
	})
}

// ClearProductID clears the value of the "product_id" field.
func (u *ProductUpsertBulk) ClearProductID() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearProductID()
	})
}

// SetGender sets the "gender" field.
func (u *ProductUpsertBulk) SetGender(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateGender() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateGender()
	})
}

// ClearGender clears the value of the "gender" field.
func (u *ProductUpsertBulk) ClearGender() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearGender()
	})
}

// SetColor sets the "color" field.
func (u *ProductUpsertBulk) SetColor(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetColor(v)
	})
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateColor() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateColor()
	})
}

// ClearColor clears the value of the "color" field.
func (u *ProductUpsertBulk) ClearColor() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearColor()
	})
}

// SetCategory sets the "category" field.
func (u *ProductUpsertBulk) SetCategory(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateCategory() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateCategory()
	})
}

// ClearCategory clears the value of the "category" field.
func (u *ProductUpsertBulk) ClearCategory() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearCategory()
	})
}

// SetCategorySpec sets the "category_spec" field.
func (u *ProductUpsertBulk) SetCategorySpec(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetCategorySpec(v)
	})
}

// UpdateCategorySpec sets the "category_spec" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateCategorySpec() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateCategorySpec()
	})
}

// ClearCategorySpec clears the value of the "category_spec" field.
func (u *ProductUpsertBulk) ClearCategorySpec() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearCategorySpec()
	})
}

// SetSoldOut sets the "sold_out" field.
func (u *ProductUpsertBulk) SetSoldOut(v bool) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetSoldOut(v)
	})
}

// UpdateSoldOut sets the "sold_out" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateSoldOut() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateSoldOut()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductUpsertBulk) SetUpdatedAt(v time.Time) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateUpdatedAt() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ProductUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProductCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProductCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
