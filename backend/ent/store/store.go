// Code generated by ent, DO NOT EDIT.

package store

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the store type in the database.
	Label = "store"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStoreName holds the string denoting the store_name field in the database.
	FieldStoreName = "store_name"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldTaxReduction holds the string denoting the tax_reduction field in the database.
	FieldTaxReduction = "tax_reduction"
	// FieldIntlShippingFee holds the string denoting the intl_shipping_fee field in the database.
	FieldIntlShippingFee = "intl_shipping_fee"
	// FieldIntlFreeShippingFee holds the string denoting the intl_free_shipping_fee field in the database.
	FieldIntlFreeShippingFee = "intl_free_shipping_fee"
	// FieldDomesticShippingFee holds the string denoting the domestic_shipping_fee field in the database.
	FieldDomesticShippingFee = "domestic_shipping_fee"
	// FieldDomesticFreeShippingFee holds the string denoting the domestic_free_shipping_fee field in the database.
	FieldDomesticFreeShippingFee = "domestic_free_shipping_fee"
	// FieldShippingFeeCumulation holds the string denoting the shipping_fee_cumulation field in the database.
	FieldShippingFeeCumulation = "shipping_fee_cumulation"
	// FieldDeliveryAgency holds the string denoting the delivery_agency field in the database.
	FieldDeliveryAgency = "delivery_agency"
	// FieldBrokerFee holds the string denoting the broker_fee field in the database.
	FieldBrokerFee = "broker_fee"
	// FieldDdp holds the string denoting the ddp field in the database.
	FieldDdp = "ddp"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeProducts holds the string denoting the products edge name in mutations.
	EdgeProducts = "products"
	// Table holds the table name of the store in the database.
	Table = "stores"
	// ProductsTable is the table that holds the products relation/edge.
	ProductsTable = "products"
	// ProductsInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductsInverseTable = "products"
	// ProductsColumn is the table column denoting the products relation/edge.
	ProductsColumn = "store_products"
)

// Columns holds all SQL columns for store fields.
var Columns = []string{
	FieldID,
	FieldStoreName,
	FieldURL,
	FieldCountry,
	FieldCurrency,
	FieldTaxReduction,
	FieldIntlShippingFee,
	FieldIntlFreeShippingFee,
	FieldDomesticShippingFee,
	FieldDomesticFreeShippingFee,
	FieldShippingFeeCumulation,
	FieldDeliveryAgency,
	FieldBrokerFee,
	FieldDdp,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Store queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStoreName orders the results by the store_name field.
func ByStoreName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoreName, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByCountry orders the results by the country field.
func ByCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByTaxReduction orders the results by the tax_reduction field.
func ByTaxReduction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxReduction, opts...).ToFunc()
}

// ByIntlFreeShippingFee orders the results by the intl_free_shipping_fee field.
func ByIntlFreeShippingFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntlFreeShippingFee, opts...).ToFunc()
}

// ByDomesticShippingFee orders the results by the domestic_shipping_fee field.
func ByDomesticShippingFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDomesticShippingFee, opts...).ToFunc()
}

// ByDomesticFreeShippingFee orders the results by the domestic_free_shipping_fee field.
func ByDomesticFreeShippingFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDomesticFreeShippingFee, opts...).ToFunc()
}

// ByShippingFeeCumulation orders the results by the shipping_fee_cumulation field.
func ByShippingFeeCumulation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShippingFeeCumulation, opts...).ToFunc()
}

// ByDeliveryAgency orders the results by the delivery_agency field.
func ByDeliveryAgency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeliveryAgency, opts...).ToFunc()
}

// ByBrokerFee orders the results by the broker_fee field.
func ByBrokerFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrokerFee, opts...).ToFunc()
}

// ByDdp orders the results by the ddp field.
func ByDdp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDdp, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProductsCount orders the results by products count.
func ByProductsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductsStep(), opts...)
	}
}

// ByProducts orders the results by products terms.
func ByProducts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProductsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductsTable, ProductsColumn),
	)
}
