// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/product"
	"backend/ent/schema"
	"backend/ent/store"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StoreCreate is the builder for creating a Store entity.
type StoreCreate struct {
	config
	mutation *StoreMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetKorID sets the "kor_id" field.
func (sc *StoreCreate) SetKorID(s string) *StoreCreate {
	sc.mutation.SetKorID(s)
	return sc
}

// SetStoreURL sets the "store_url" field.
func (sc *StoreCreate) SetStoreURL(s string) *StoreCreate {
	sc.mutation.SetStoreURL(s)
	return sc
}

// SetCountry sets the "country" field.
func (sc *StoreCreate) SetCountry(s string) *StoreCreate {
	sc.mutation.SetCountry(s)
	return sc
}

// SetCurrency sets the "currency" field.
func (sc *StoreCreate) SetCurrency(s string) *StoreCreate {
	sc.mutation.SetCurrency(s)
	return sc
}

// SetTaxReduction sets the "tax_reduction" field.
func (sc *StoreCreate) SetTaxReduction(f float64) *StoreCreate {
	sc.mutation.SetTaxReduction(f)
	return sc
}

// SetTaxReductionManually sets the "tax_reduction_manually" field.
func (sc *StoreCreate) SetTaxReductionManually(b bool) *StoreCreate {
	sc.mutation.SetTaxReductionManually(b)
	return sc
}

// SetIntlShippingFee sets the "intl_shipping_fee" field.
func (sc *StoreCreate) SetIntlShippingFee(sf *schema.ShippingFee) *StoreCreate {
	sc.mutation.SetIntlShippingFee(sf)
	return sc
}

// SetIntlFreeShippingMin sets the "intl_free_shipping_min" field.
func (sc *StoreCreate) SetIntlFreeShippingMin(i int) *StoreCreate {
	sc.mutation.SetIntlFreeShippingMin(i)
	return sc
}

// SetDomesticShippingFee sets the "domestic_shipping_fee" field.
func (sc *StoreCreate) SetDomesticShippingFee(f float64) *StoreCreate {
	sc.mutation.SetDomesticShippingFee(f)
	return sc
}

// SetDomesticFreeShippingMin sets the "domestic_free_shipping_min" field.
func (sc *StoreCreate) SetDomesticFreeShippingMin(f float64) *StoreCreate {
	sc.mutation.SetDomesticFreeShippingMin(f)
	return sc
}

// SetShippingFeeCumulation sets the "shipping_fee_cumulation" field.
func (sc *StoreCreate) SetShippingFeeCumulation(b bool) *StoreCreate {
	sc.mutation.SetShippingFeeCumulation(b)
	return sc
}

// SetDeliveryAgency sets the "delivery_agency" field.
func (sc *StoreCreate) SetDeliveryAgency(s string) *StoreCreate {
	sc.mutation.SetDeliveryAgency(s)
	return sc
}

// SetBrokerFee sets the "broker_fee" field.
func (sc *StoreCreate) SetBrokerFee(b bool) *StoreCreate {
	sc.mutation.SetBrokerFee(b)
	return sc
}

// SetDdp sets the "ddp" field.
func (sc *StoreCreate) SetDdp(b bool) *StoreCreate {
	sc.mutation.SetDdp(b)
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StoreCreate) SetUpdatedAt(t time.Time) *StoreCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StoreCreate) SetNillableUpdatedAt(t *time.Time) *StoreCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *StoreCreate) SetID(s string) *StoreCreate {
	sc.mutation.SetID(s)
	return sc
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (sc *StoreCreate) AddProductIDs(ids ...int) *StoreCreate {
	sc.mutation.AddProductIDs(ids...)
	return sc
}

// AddProduct adds the "product" edges to the Product entity.
func (sc *StoreCreate) AddProduct(p ...*Product) *StoreCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sc.AddProductIDs(ids...)
}

// Mutation returns the StoreMutation object of the builder.
func (sc *StoreCreate) Mutation() *StoreMutation {
	return sc.mutation
}

// Save creates the Store in the database.
func (sc *StoreCreate) Save(ctx context.Context) (*Store, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StoreCreate) SaveX(ctx context.Context) *Store {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StoreCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StoreCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StoreCreate) defaults() {
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := store.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StoreCreate) check() error {
	if _, ok := sc.mutation.KorID(); !ok {
		return &ValidationError{Name: "kor_id", err: errors.New(`ent: missing required field "Store.kor_id"`)}
	}
	if _, ok := sc.mutation.StoreURL(); !ok {
		return &ValidationError{Name: "store_url", err: errors.New(`ent: missing required field "Store.store_url"`)}
	}
	if _, ok := sc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "Store.country"`)}
	}
	if _, ok := sc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "Store.currency"`)}
	}
	if _, ok := sc.mutation.TaxReduction(); !ok {
		return &ValidationError{Name: "tax_reduction", err: errors.New(`ent: missing required field "Store.tax_reduction"`)}
	}
	if _, ok := sc.mutation.TaxReductionManually(); !ok {
		return &ValidationError{Name: "tax_reduction_manually", err: errors.New(`ent: missing required field "Store.tax_reduction_manually"`)}
	}
	if _, ok := sc.mutation.IntlShippingFee(); !ok {
		return &ValidationError{Name: "intl_shipping_fee", err: errors.New(`ent: missing required field "Store.intl_shipping_fee"`)}
	}
	if _, ok := sc.mutation.IntlFreeShippingMin(); !ok {
		return &ValidationError{Name: "intl_free_shipping_min", err: errors.New(`ent: missing required field "Store.intl_free_shipping_min"`)}
	}
	if _, ok := sc.mutation.DomesticShippingFee(); !ok {
		return &ValidationError{Name: "domestic_shipping_fee", err: errors.New(`ent: missing required field "Store.domestic_shipping_fee"`)}
	}
	if _, ok := sc.mutation.DomesticFreeShippingMin(); !ok {
		return &ValidationError{Name: "domestic_free_shipping_min", err: errors.New(`ent: missing required field "Store.domestic_free_shipping_min"`)}
	}
	if _, ok := sc.mutation.ShippingFeeCumulation(); !ok {
		return &ValidationError{Name: "shipping_fee_cumulation", err: errors.New(`ent: missing required field "Store.shipping_fee_cumulation"`)}
	}
	if _, ok := sc.mutation.DeliveryAgency(); !ok {
		return &ValidationError{Name: "delivery_agency", err: errors.New(`ent: missing required field "Store.delivery_agency"`)}
	}
	if _, ok := sc.mutation.BrokerFee(); !ok {
		return &ValidationError{Name: "broker_fee", err: errors.New(`ent: missing required field "Store.broker_fee"`)}
	}
	if _, ok := sc.mutation.Ddp(); !ok {
		return &ValidationError{Name: "ddp", err: errors.New(`ent: missing required field "Store.ddp"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Store.updated_at"`)}
	}
	return nil
}

func (sc *StoreCreate) sqlSave(ctx context.Context) (*Store, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Store.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StoreCreate) createSpec() (*Store, *sqlgraph.CreateSpec) {
	var (
		_node = &Store{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(store.Table, sqlgraph.NewFieldSpec(store.FieldID, field.TypeString))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.KorID(); ok {
		_spec.SetField(store.FieldKorID, field.TypeString, value)
		_node.KorID = value
	}
	if value, ok := sc.mutation.StoreURL(); ok {
		_spec.SetField(store.FieldStoreURL, field.TypeString, value)
		_node.StoreURL = value
	}
	if value, ok := sc.mutation.Country(); ok {
		_spec.SetField(store.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := sc.mutation.Currency(); ok {
		_spec.SetField(store.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := sc.mutation.TaxReduction(); ok {
		_spec.SetField(store.FieldTaxReduction, field.TypeFloat64, value)
		_node.TaxReduction = value
	}
	if value, ok := sc.mutation.TaxReductionManually(); ok {
		_spec.SetField(store.FieldTaxReductionManually, field.TypeBool, value)
		_node.TaxReductionManually = value
	}
	if value, ok := sc.mutation.IntlShippingFee(); ok {
		_spec.SetField(store.FieldIntlShippingFee, field.TypeJSON, value)
		_node.IntlShippingFee = value
	}
	if value, ok := sc.mutation.IntlFreeShippingMin(); ok {
		_spec.SetField(store.FieldIntlFreeShippingMin, field.TypeInt, value)
		_node.IntlFreeShippingMin = value
	}
	if value, ok := sc.mutation.DomesticShippingFee(); ok {
		_spec.SetField(store.FieldDomesticShippingFee, field.TypeFloat64, value)
		_node.DomesticShippingFee = value
	}
	if value, ok := sc.mutation.DomesticFreeShippingMin(); ok {
		_spec.SetField(store.FieldDomesticFreeShippingMin, field.TypeFloat64, value)
		_node.DomesticFreeShippingMin = value
	}
	if value, ok := sc.mutation.ShippingFeeCumulation(); ok {
		_spec.SetField(store.FieldShippingFeeCumulation, field.TypeBool, value)
		_node.ShippingFeeCumulation = value
	}
	if value, ok := sc.mutation.DeliveryAgency(); ok {
		_spec.SetField(store.FieldDeliveryAgency, field.TypeString, value)
		_node.DeliveryAgency = value
	}
	if value, ok := sc.mutation.BrokerFee(); ok {
		_spec.SetField(store.FieldBrokerFee, field.TypeBool, value)
		_node.BrokerFee = value
	}
	if value, ok := sc.mutation.Ddp(); ok {
		_spec.SetField(store.FieldDdp, field.TypeBool, value)
		_node.Ddp = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(store.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := sc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ProductTable,
			Columns: []string{store.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Store.Create().
//		SetKorID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StoreUpsert) {
//			SetKorID(v+v).
//		}).
//		Exec(ctx)
func (sc *StoreCreate) OnConflict(opts ...sql.ConflictOption) *StoreUpsertOne {
	sc.conflict = opts
	return &StoreUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Store.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *StoreCreate) OnConflictColumns(columns ...string) *StoreUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &StoreUpsertOne{
		create: sc,
	}
}

type (
	// StoreUpsertOne is the builder for "upsert"-ing
	//  one Store node.
	StoreUpsertOne struct {
		create *StoreCreate
	}

	// StoreUpsert is the "OnConflict" setter.
	StoreUpsert struct {
		*sql.UpdateSet
	}
)

// SetKorID sets the "kor_id" field.
func (u *StoreUpsert) SetKorID(v string) *StoreUpsert {
	u.Set(store.FieldKorID, v)
	return u
}

// UpdateKorID sets the "kor_id" field to the value that was provided on create.
func (u *StoreUpsert) UpdateKorID() *StoreUpsert {
	u.SetExcluded(store.FieldKorID)
	return u
}

// SetStoreURL sets the "store_url" field.
func (u *StoreUpsert) SetStoreURL(v string) *StoreUpsert {
	u.Set(store.FieldStoreURL, v)
	return u
}

// UpdateStoreURL sets the "store_url" field to the value that was provided on create.
func (u *StoreUpsert) UpdateStoreURL() *StoreUpsert {
	u.SetExcluded(store.FieldStoreURL)
	return u
}

// SetCountry sets the "country" field.
func (u *StoreUpsert) SetCountry(v string) *StoreUpsert {
	u.Set(store.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *StoreUpsert) UpdateCountry() *StoreUpsert {
	u.SetExcluded(store.FieldCountry)
	return u
}

// SetCurrency sets the "currency" field.
func (u *StoreUpsert) SetCurrency(v string) *StoreUpsert {
	u.Set(store.FieldCurrency, v)
	return u
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *StoreUpsert) UpdateCurrency() *StoreUpsert {
	u.SetExcluded(store.FieldCurrency)
	return u
}

// SetTaxReduction sets the "tax_reduction" field.
func (u *StoreUpsert) SetTaxReduction(v float64) *StoreUpsert {
	u.Set(store.FieldTaxReduction, v)
	return u
}

// UpdateTaxReduction sets the "tax_reduction" field to the value that was provided on create.
func (u *StoreUpsert) UpdateTaxReduction() *StoreUpsert {
	u.SetExcluded(store.FieldTaxReduction)
	return u
}

// AddTaxReduction adds v to the "tax_reduction" field.
func (u *StoreUpsert) AddTaxReduction(v float64) *StoreUpsert {
	u.Add(store.FieldTaxReduction, v)
	return u
}

// SetTaxReductionManually sets the "tax_reduction_manually" field.
func (u *StoreUpsert) SetTaxReductionManually(v bool) *StoreUpsert {
	u.Set(store.FieldTaxReductionManually, v)
	return u
}

// UpdateTaxReductionManually sets the "tax_reduction_manually" field to the value that was provided on create.
func (u *StoreUpsert) UpdateTaxReductionManually() *StoreUpsert {
	u.SetExcluded(store.FieldTaxReductionManually)
	return u
}

// SetIntlShippingFee sets the "intl_shipping_fee" field.
func (u *StoreUpsert) SetIntlShippingFee(v *schema.ShippingFee) *StoreUpsert {
	u.Set(store.FieldIntlShippingFee, v)
	return u
}

// UpdateIntlShippingFee sets the "intl_shipping_fee" field to the value that was provided on create.
func (u *StoreUpsert) UpdateIntlShippingFee() *StoreUpsert {
	u.SetExcluded(store.FieldIntlShippingFee)
	return u
}

// SetIntlFreeShippingMin sets the "intl_free_shipping_min" field.
func (u *StoreUpsert) SetIntlFreeShippingMin(v int) *StoreUpsert {
	u.Set(store.FieldIntlFreeShippingMin, v)
	return u
}

// UpdateIntlFreeShippingMin sets the "intl_free_shipping_min" field to the value that was provided on create.
func (u *StoreUpsert) UpdateIntlFreeShippingMin() *StoreUpsert {
	u.SetExcluded(store.FieldIntlFreeShippingMin)
	return u
}

// AddIntlFreeShippingMin adds v to the "intl_free_shipping_min" field.
func (u *StoreUpsert) AddIntlFreeShippingMin(v int) *StoreUpsert {
	u.Add(store.FieldIntlFreeShippingMin, v)
	return u
}

// SetDomesticShippingFee sets the "domestic_shipping_fee" field.
func (u *StoreUpsert) SetDomesticShippingFee(v float64) *StoreUpsert {
	u.Set(store.FieldDomesticShippingFee, v)
	return u
}

// UpdateDomesticShippingFee sets the "domestic_shipping_fee" field to the value that was provided on create.
func (u *StoreUpsert) UpdateDomesticShippingFee() *StoreUpsert {
	u.SetExcluded(store.FieldDomesticShippingFee)
	return u
}

// AddDomesticShippingFee adds v to the "domestic_shipping_fee" field.
func (u *StoreUpsert) AddDomesticShippingFee(v float64) *StoreUpsert {
	u.Add(store.FieldDomesticShippingFee, v)
	return u
}

// SetDomesticFreeShippingMin sets the "domestic_free_shipping_min" field.
func (u *StoreUpsert) SetDomesticFreeShippingMin(v float64) *StoreUpsert {
	u.Set(store.FieldDomesticFreeShippingMin, v)
	return u
}

// UpdateDomesticFreeShippingMin sets the "domestic_free_shipping_min" field to the value that was provided on create.
func (u *StoreUpsert) UpdateDomesticFreeShippingMin() *StoreUpsert {
	u.SetExcluded(store.FieldDomesticFreeShippingMin)
	return u
}

// AddDomesticFreeShippingMin adds v to the "domestic_free_shipping_min" field.
func (u *StoreUpsert) AddDomesticFreeShippingMin(v float64) *StoreUpsert {
	u.Add(store.FieldDomesticFreeShippingMin, v)
	return u
}

// SetShippingFeeCumulation sets the "shipping_fee_cumulation" field.
func (u *StoreUpsert) SetShippingFeeCumulation(v bool) *StoreUpsert {
	u.Set(store.FieldShippingFeeCumulation, v)
	return u
}

// UpdateShippingFeeCumulation sets the "shipping_fee_cumulation" field to the value that was provided on create.
func (u *StoreUpsert) UpdateShippingFeeCumulation() *StoreUpsert {
	u.SetExcluded(store.FieldShippingFeeCumulation)
	return u
}

// SetDeliveryAgency sets the "delivery_agency" field.
func (u *StoreUpsert) SetDeliveryAgency(v string) *StoreUpsert {
	u.Set(store.FieldDeliveryAgency, v)
	return u
}

// UpdateDeliveryAgency sets the "delivery_agency" field to the value that was provided on create.
func (u *StoreUpsert) UpdateDeliveryAgency() *StoreUpsert {
	u.SetExcluded(store.FieldDeliveryAgency)
	return u
}

// SetBrokerFee sets the "broker_fee" field.
func (u *StoreUpsert) SetBrokerFee(v bool) *StoreUpsert {
	u.Set(store.FieldBrokerFee, v)
	return u
}

// UpdateBrokerFee sets the "broker_fee" field to the value that was provided on create.
func (u *StoreUpsert) UpdateBrokerFee() *StoreUpsert {
	u.SetExcluded(store.FieldBrokerFee)
	return u
}

// SetDdp sets the "ddp" field.
func (u *StoreUpsert) SetDdp(v bool) *StoreUpsert {
	u.Set(store.FieldDdp, v)
	return u
}

// UpdateDdp sets the "ddp" field to the value that was provided on create.
func (u *StoreUpsert) UpdateDdp() *StoreUpsert {
	u.SetExcluded(store.FieldDdp)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StoreUpsert) SetUpdatedAt(v time.Time) *StoreUpsert {
	u.Set(store.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StoreUpsert) UpdateUpdatedAt() *StoreUpsert {
	u.SetExcluded(store.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Store.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(store.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *StoreUpsertOne) UpdateNewValues() *StoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(store.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Store.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *StoreUpsertOne) Ignore() *StoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StoreUpsertOne) DoNothing() *StoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StoreCreate.OnConflict
// documentation for more info.
func (u *StoreUpsertOne) Update(set func(*StoreUpsert)) *StoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StoreUpsert{UpdateSet: update})
	}))
	return u
}

// SetKorID sets the "kor_id" field.
func (u *StoreUpsertOne) SetKorID(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetKorID(v)
	})
}

// UpdateKorID sets the "kor_id" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateKorID() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateKorID()
	})
}

// SetStoreURL sets the "store_url" field.
func (u *StoreUpsertOne) SetStoreURL(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetStoreURL(v)
	})
}

// UpdateStoreURL sets the "store_url" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateStoreURL() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateStoreURL()
	})
}

// SetCountry sets the "country" field.
func (u *StoreUpsertOne) SetCountry(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateCountry() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateCountry()
	})
}

// SetCurrency sets the "currency" field.
func (u *StoreUpsertOne) SetCurrency(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateCurrency() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateCurrency()
	})
}

// SetTaxReduction sets the "tax_reduction" field.
func (u *StoreUpsertOne) SetTaxReduction(v float64) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetTaxReduction(v)
	})
}

// AddTaxReduction adds v to the "tax_reduction" field.
func (u *StoreUpsertOne) AddTaxReduction(v float64) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.AddTaxReduction(v)
	})
}

// UpdateTaxReduction sets the "tax_reduction" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateTaxReduction() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateTaxReduction()
	})
}

// SetTaxReductionManually sets the "tax_reduction_manually" field.
func (u *StoreUpsertOne) SetTaxReductionManually(v bool) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetTaxReductionManually(v)
	})
}

// UpdateTaxReductionManually sets the "tax_reduction_manually" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateTaxReductionManually() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateTaxReductionManually()
	})
}

// SetIntlShippingFee sets the "intl_shipping_fee" field.
func (u *StoreUpsertOne) SetIntlShippingFee(v *schema.ShippingFee) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetIntlShippingFee(v)
	})
}

// UpdateIntlShippingFee sets the "intl_shipping_fee" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateIntlShippingFee() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateIntlShippingFee()
	})
}

// SetIntlFreeShippingMin sets the "intl_free_shipping_min" field.
func (u *StoreUpsertOne) SetIntlFreeShippingMin(v int) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetIntlFreeShippingMin(v)
	})
}

// AddIntlFreeShippingMin adds v to the "intl_free_shipping_min" field.
func (u *StoreUpsertOne) AddIntlFreeShippingMin(v int) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.AddIntlFreeShippingMin(v)
	})
}

// UpdateIntlFreeShippingMin sets the "intl_free_shipping_min" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateIntlFreeShippingMin() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateIntlFreeShippingMin()
	})
}

// SetDomesticShippingFee sets the "domestic_shipping_fee" field.
func (u *StoreUpsertOne) SetDomesticShippingFee(v float64) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetDomesticShippingFee(v)
	})
}

// AddDomesticShippingFee adds v to the "domestic_shipping_fee" field.
func (u *StoreUpsertOne) AddDomesticShippingFee(v float64) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.AddDomesticShippingFee(v)
	})
}

// UpdateDomesticShippingFee sets the "domestic_shipping_fee" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateDomesticShippingFee() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateDomesticShippingFee()
	})
}

// SetDomesticFreeShippingMin sets the "domestic_free_shipping_min" field.
func (u *StoreUpsertOne) SetDomesticFreeShippingMin(v float64) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetDomesticFreeShippingMin(v)
	})
}

// AddDomesticFreeShippingMin adds v to the "domestic_free_shipping_min" field.
func (u *StoreUpsertOne) AddDomesticFreeShippingMin(v float64) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.AddDomesticFreeShippingMin(v)
	})
}

// UpdateDomesticFreeShippingMin sets the "domestic_free_shipping_min" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateDomesticFreeShippingMin() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateDomesticFreeShippingMin()
	})
}

// SetShippingFeeCumulation sets the "shipping_fee_cumulation" field.
func (u *StoreUpsertOne) SetShippingFeeCumulation(v bool) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetShippingFeeCumulation(v)
	})
}

// UpdateShippingFeeCumulation sets the "shipping_fee_cumulation" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateShippingFeeCumulation() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateShippingFeeCumulation()
	})
}

// SetDeliveryAgency sets the "delivery_agency" field.
func (u *StoreUpsertOne) SetDeliveryAgency(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetDeliveryAgency(v)
	})
}

// UpdateDeliveryAgency sets the "delivery_agency" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateDeliveryAgency() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateDeliveryAgency()
	})
}

// SetBrokerFee sets the "broker_fee" field.
func (u *StoreUpsertOne) SetBrokerFee(v bool) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetBrokerFee(v)
	})
}

// UpdateBrokerFee sets the "broker_fee" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateBrokerFee() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateBrokerFee()
	})
}

// SetDdp sets the "ddp" field.
func (u *StoreUpsertOne) SetDdp(v bool) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetDdp(v)
	})
}

// UpdateDdp sets the "ddp" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateDdp() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateDdp()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StoreUpsertOne) SetUpdatedAt(v time.Time) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateUpdatedAt() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *StoreUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StoreCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StoreUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StoreUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: StoreUpsertOne.ID is not supported by MySQL driver. Use StoreUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StoreUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StoreCreateBulk is the builder for creating many Store entities in bulk.
type StoreCreateBulk struct {
	config
	err      error
	builders []*StoreCreate
	conflict []sql.ConflictOption
}

// Save creates the Store entities in the database.
func (scb *StoreCreateBulk) Save(ctx context.Context) ([]*Store, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Store, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StoreCreateBulk) SaveX(ctx context.Context) []*Store {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StoreCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StoreCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Store.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StoreUpsert) {
//			SetKorID(v+v).
//		}).
//		Exec(ctx)
func (scb *StoreCreateBulk) OnConflict(opts ...sql.ConflictOption) *StoreUpsertBulk {
	scb.conflict = opts
	return &StoreUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Store.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *StoreCreateBulk) OnConflictColumns(columns ...string) *StoreUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &StoreUpsertBulk{
		create: scb,
	}
}

// StoreUpsertBulk is the builder for "upsert"-ing
// a bulk of Store nodes.
type StoreUpsertBulk struct {
	create *StoreCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Store.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(store.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *StoreUpsertBulk) UpdateNewValues() *StoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(store.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Store.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *StoreUpsertBulk) Ignore() *StoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StoreUpsertBulk) DoNothing() *StoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StoreCreateBulk.OnConflict
// documentation for more info.
func (u *StoreUpsertBulk) Update(set func(*StoreUpsert)) *StoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StoreUpsert{UpdateSet: update})
	}))
	return u
}

// SetKorID sets the "kor_id" field.
func (u *StoreUpsertBulk) SetKorID(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetKorID(v)
	})
}

// UpdateKorID sets the "kor_id" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateKorID() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateKorID()
	})
}

// SetStoreURL sets the "store_url" field.
func (u *StoreUpsertBulk) SetStoreURL(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetStoreURL(v)
	})
}

// UpdateStoreURL sets the "store_url" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateStoreURL() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateStoreURL()
	})
}

// SetCountry sets the "country" field.
func (u *StoreUpsertBulk) SetCountry(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateCountry() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateCountry()
	})
}

// SetCurrency sets the "currency" field.
func (u *StoreUpsertBulk) SetCurrency(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateCurrency() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateCurrency()
	})
}

// SetTaxReduction sets the "tax_reduction" field.
func (u *StoreUpsertBulk) SetTaxReduction(v float64) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetTaxReduction(v)
	})
}

// AddTaxReduction adds v to the "tax_reduction" field.
func (u *StoreUpsertBulk) AddTaxReduction(v float64) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.AddTaxReduction(v)
	})
}

// UpdateTaxReduction sets the "tax_reduction" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateTaxReduction() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateTaxReduction()
	})
}

// SetTaxReductionManually sets the "tax_reduction_manually" field.
func (u *StoreUpsertBulk) SetTaxReductionManually(v bool) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetTaxReductionManually(v)
	})
}

// UpdateTaxReductionManually sets the "tax_reduction_manually" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateTaxReductionManually() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateTaxReductionManually()
	})
}

// SetIntlShippingFee sets the "intl_shipping_fee" field.
func (u *StoreUpsertBulk) SetIntlShippingFee(v *schema.ShippingFee) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetIntlShippingFee(v)
	})
}

// UpdateIntlShippingFee sets the "intl_shipping_fee" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateIntlShippingFee() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateIntlShippingFee()
	})
}

// SetIntlFreeShippingMin sets the "intl_free_shipping_min" field.
func (u *StoreUpsertBulk) SetIntlFreeShippingMin(v int) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetIntlFreeShippingMin(v)
	})
}

// AddIntlFreeShippingMin adds v to the "intl_free_shipping_min" field.
func (u *StoreUpsertBulk) AddIntlFreeShippingMin(v int) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.AddIntlFreeShippingMin(v)
	})
}

// UpdateIntlFreeShippingMin sets the "intl_free_shipping_min" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateIntlFreeShippingMin() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateIntlFreeShippingMin()
	})
}

// SetDomesticShippingFee sets the "domestic_shipping_fee" field.
func (u *StoreUpsertBulk) SetDomesticShippingFee(v float64) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetDomesticShippingFee(v)
	})
}

// AddDomesticShippingFee adds v to the "domestic_shipping_fee" field.
func (u *StoreUpsertBulk) AddDomesticShippingFee(v float64) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.AddDomesticShippingFee(v)
	})
}

// UpdateDomesticShippingFee sets the "domestic_shipping_fee" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateDomesticShippingFee() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateDomesticShippingFee()
	})
}

// SetDomesticFreeShippingMin sets the "domestic_free_shipping_min" field.
func (u *StoreUpsertBulk) SetDomesticFreeShippingMin(v float64) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetDomesticFreeShippingMin(v)
	})
}

// AddDomesticFreeShippingMin adds v to the "domestic_free_shipping_min" field.
func (u *StoreUpsertBulk) AddDomesticFreeShippingMin(v float64) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.AddDomesticFreeShippingMin(v)
	})
}

// UpdateDomesticFreeShippingMin sets the "domestic_free_shipping_min" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateDomesticFreeShippingMin() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateDomesticFreeShippingMin()
	})
}

// SetShippingFeeCumulation sets the "shipping_fee_cumulation" field.
func (u *StoreUpsertBulk) SetShippingFeeCumulation(v bool) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetShippingFeeCumulation(v)
	})
}

// UpdateShippingFeeCumulation sets the "shipping_fee_cumulation" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateShippingFeeCumulation() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateShippingFeeCumulation()
	})
}

// SetDeliveryAgency sets the "delivery_agency" field.
func (u *StoreUpsertBulk) SetDeliveryAgency(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetDeliveryAgency(v)
	})
}

// UpdateDeliveryAgency sets the "delivery_agency" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateDeliveryAgency() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateDeliveryAgency()
	})
}

// SetBrokerFee sets the "broker_fee" field.
func (u *StoreUpsertBulk) SetBrokerFee(v bool) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetBrokerFee(v)
	})
}

// UpdateBrokerFee sets the "broker_fee" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateBrokerFee() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateBrokerFee()
	})
}

// SetDdp sets the "ddp" field.
func (u *StoreUpsertBulk) SetDdp(v bool) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetDdp(v)
	})
}

// UpdateDdp sets the "ddp" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateDdp() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateDdp()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StoreUpsertBulk) SetUpdatedAt(v time.Time) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateUpdatedAt() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *StoreUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the StoreCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StoreCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StoreUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
