// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/product"
	"backend/ent/schema"
	"backend/ent/store"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StoreCreate is the builder for creating a Store entity.
type StoreCreate struct {
	config
	mutation *StoreMutation
	hooks    []Hook
}

// SetStoreName sets the "store_name" field.
func (sc *StoreCreate) SetStoreName(s string) *StoreCreate {
	sc.mutation.SetStoreName(s)
	return sc
}

// SetURL sets the "url" field.
func (sc *StoreCreate) SetURL(s string) *StoreCreate {
	sc.mutation.SetURL(s)
	return sc
}

// SetCountry sets the "country" field.
func (sc *StoreCreate) SetCountry(s string) *StoreCreate {
	sc.mutation.SetCountry(s)
	return sc
}

// SetCurrency sets the "currency" field.
func (sc *StoreCreate) SetCurrency(s string) *StoreCreate {
	sc.mutation.SetCurrency(s)
	return sc
}

// SetTaxReduction sets the "tax_reduction" field.
func (sc *StoreCreate) SetTaxReduction(f float64) *StoreCreate {
	sc.mutation.SetTaxReduction(f)
	return sc
}

// SetIntlShippingFee sets the "intl_shipping_fee" field.
func (sc *StoreCreate) SetIntlShippingFee(sf *schema.ShippingFee) *StoreCreate {
	sc.mutation.SetIntlShippingFee(sf)
	return sc
}

// SetIntlFreeShippingFee sets the "intl_free_shipping_fee" field.
func (sc *StoreCreate) SetIntlFreeShippingFee(i int) *StoreCreate {
	sc.mutation.SetIntlFreeShippingFee(i)
	return sc
}

// SetDomesticShippingFee sets the "domestic_shipping_fee" field.
func (sc *StoreCreate) SetDomesticShippingFee(f float64) *StoreCreate {
	sc.mutation.SetDomesticShippingFee(f)
	return sc
}

// SetDomesticFreeShippingFee sets the "domestic_free_shipping_fee" field.
func (sc *StoreCreate) SetDomesticFreeShippingFee(f float64) *StoreCreate {
	sc.mutation.SetDomesticFreeShippingFee(f)
	return sc
}

// SetShippingFeeCumulation sets the "shipping_fee_cumulation" field.
func (sc *StoreCreate) SetShippingFeeCumulation(b bool) *StoreCreate {
	sc.mutation.SetShippingFeeCumulation(b)
	return sc
}

// SetDeliveryAgency sets the "delivery_agency" field.
func (sc *StoreCreate) SetDeliveryAgency(s string) *StoreCreate {
	sc.mutation.SetDeliveryAgency(s)
	return sc
}

// SetBrokerFee sets the "broker_fee" field.
func (sc *StoreCreate) SetBrokerFee(b bool) *StoreCreate {
	sc.mutation.SetBrokerFee(b)
	return sc
}

// SetDdp sets the "ddp" field.
func (sc *StoreCreate) SetDdp(b bool) *StoreCreate {
	sc.mutation.SetDdp(b)
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StoreCreate) SetUpdatedAt(t time.Time) *StoreCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StoreCreate) SetNillableUpdatedAt(t *time.Time) *StoreCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (sc *StoreCreate) AddProductIDs(ids ...int) *StoreCreate {
	sc.mutation.AddProductIDs(ids...)
	return sc
}

// AddProducts adds the "products" edges to the Product entity.
func (sc *StoreCreate) AddProducts(p ...*Product) *StoreCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sc.AddProductIDs(ids...)
}

// Mutation returns the StoreMutation object of the builder.
func (sc *StoreCreate) Mutation() *StoreMutation {
	return sc.mutation
}

// Save creates the Store in the database.
func (sc *StoreCreate) Save(ctx context.Context) (*Store, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StoreCreate) SaveX(ctx context.Context) *Store {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StoreCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StoreCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StoreCreate) defaults() {
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := store.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StoreCreate) check() error {
	if _, ok := sc.mutation.StoreName(); !ok {
		return &ValidationError{Name: "store_name", err: errors.New(`ent: missing required field "Store.store_name"`)}
	}
	if _, ok := sc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Store.url"`)}
	}
	if _, ok := sc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "Store.country"`)}
	}
	if _, ok := sc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "Store.currency"`)}
	}
	if _, ok := sc.mutation.TaxReduction(); !ok {
		return &ValidationError{Name: "tax_reduction", err: errors.New(`ent: missing required field "Store.tax_reduction"`)}
	}
	if _, ok := sc.mutation.IntlShippingFee(); !ok {
		return &ValidationError{Name: "intl_shipping_fee", err: errors.New(`ent: missing required field "Store.intl_shipping_fee"`)}
	}
	if _, ok := sc.mutation.IntlFreeShippingFee(); !ok {
		return &ValidationError{Name: "intl_free_shipping_fee", err: errors.New(`ent: missing required field "Store.intl_free_shipping_fee"`)}
	}
	if _, ok := sc.mutation.DomesticShippingFee(); !ok {
		return &ValidationError{Name: "domestic_shipping_fee", err: errors.New(`ent: missing required field "Store.domestic_shipping_fee"`)}
	}
	if _, ok := sc.mutation.DomesticFreeShippingFee(); !ok {
		return &ValidationError{Name: "domestic_free_shipping_fee", err: errors.New(`ent: missing required field "Store.domestic_free_shipping_fee"`)}
	}
	if _, ok := sc.mutation.ShippingFeeCumulation(); !ok {
		return &ValidationError{Name: "shipping_fee_cumulation", err: errors.New(`ent: missing required field "Store.shipping_fee_cumulation"`)}
	}
	if _, ok := sc.mutation.DeliveryAgency(); !ok {
		return &ValidationError{Name: "delivery_agency", err: errors.New(`ent: missing required field "Store.delivery_agency"`)}
	}
	if _, ok := sc.mutation.BrokerFee(); !ok {
		return &ValidationError{Name: "broker_fee", err: errors.New(`ent: missing required field "Store.broker_fee"`)}
	}
	if _, ok := sc.mutation.Ddp(); !ok {
		return &ValidationError{Name: "ddp", err: errors.New(`ent: missing required field "Store.ddp"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Store.updated_at"`)}
	}
	return nil
}

func (sc *StoreCreate) sqlSave(ctx context.Context) (*Store, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StoreCreate) createSpec() (*Store, *sqlgraph.CreateSpec) {
	var (
		_node = &Store{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(store.Table, sqlgraph.NewFieldSpec(store.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.StoreName(); ok {
		_spec.SetField(store.FieldStoreName, field.TypeString, value)
		_node.StoreName = value
	}
	if value, ok := sc.mutation.URL(); ok {
		_spec.SetField(store.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := sc.mutation.Country(); ok {
		_spec.SetField(store.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := sc.mutation.Currency(); ok {
		_spec.SetField(store.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := sc.mutation.TaxReduction(); ok {
		_spec.SetField(store.FieldTaxReduction, field.TypeFloat64, value)
		_node.TaxReduction = value
	}
	if value, ok := sc.mutation.IntlShippingFee(); ok {
		_spec.SetField(store.FieldIntlShippingFee, field.TypeJSON, value)
		_node.IntlShippingFee = value
	}
	if value, ok := sc.mutation.IntlFreeShippingFee(); ok {
		_spec.SetField(store.FieldIntlFreeShippingFee, field.TypeInt, value)
		_node.IntlFreeShippingFee = value
	}
	if value, ok := sc.mutation.DomesticShippingFee(); ok {
		_spec.SetField(store.FieldDomesticShippingFee, field.TypeFloat64, value)
		_node.DomesticShippingFee = value
	}
	if value, ok := sc.mutation.DomesticFreeShippingFee(); ok {
		_spec.SetField(store.FieldDomesticFreeShippingFee, field.TypeFloat64, value)
		_node.DomesticFreeShippingFee = value
	}
	if value, ok := sc.mutation.ShippingFeeCumulation(); ok {
		_spec.SetField(store.FieldShippingFeeCumulation, field.TypeBool, value)
		_node.ShippingFeeCumulation = value
	}
	if value, ok := sc.mutation.DeliveryAgency(); ok {
		_spec.SetField(store.FieldDeliveryAgency, field.TypeString, value)
		_node.DeliveryAgency = value
	}
	if value, ok := sc.mutation.BrokerFee(); ok {
		_spec.SetField(store.FieldBrokerFee, field.TypeBool, value)
		_node.BrokerFee = value
	}
	if value, ok := sc.mutation.Ddp(); ok {
		_spec.SetField(store.FieldDdp, field.TypeBool, value)
		_node.Ddp = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(store.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := sc.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ProductsTable,
			Columns: []string{store.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StoreCreateBulk is the builder for creating many Store entities in bulk.
type StoreCreateBulk struct {
	config
	err      error
	builders []*StoreCreate
}

// Save creates the Store entities in the database.
func (scb *StoreCreateBulk) Save(ctx context.Context) ([]*Store, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Store, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StoreCreateBulk) SaveX(ctx context.Context) []*Store {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StoreCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StoreCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
