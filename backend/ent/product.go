// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/product"
	"backend/ent/store"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StoreName holds the value of the "store_name" field.
	StoreName string `json:"store_name,omitempty"`
	// Brand holds the value of the "brand" field.
	Brand string `json:"brand,omitempty"`
	// ProductName holds the value of the "product_name" field.
	ProductName string `json:"product_name,omitempty"`
	// ProductImgURL holds the value of the "product_img_url" field.
	ProductImgURL string `json:"product_img_url,omitempty"`
	// ProductURL holds the value of the "product_url" field.
	ProductURL string `json:"product_url,omitempty"`
	// CurrencyCode holds the value of the "currency_code" field.
	CurrencyCode string `json:"currency_code,omitempty"`
	// RetailPrice holds the value of the "retail_price" field.
	RetailPrice float64 `json:"retail_price,omitempty"`
	// SalePrice holds the value of the "sale_price" field.
	SalePrice float64 `json:"sale_price,omitempty"`
	// IsSale holds the value of the "is_sale" field.
	IsSale bool `json:"is_sale,omitempty"`
	// MadeIn holds the value of the "made_in" field.
	MadeIn string `json:"made_in,omitempty"`
	// KorBrand holds the value of the "kor_brand" field.
	KorBrand string `json:"kor_brand,omitempty"`
	// KorProductName holds the value of the "kor_product_name" field.
	KorProductName string `json:"kor_product_name,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID string `json:"product_id,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender string `json:"gender,omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// CategorySpec holds the value of the "category_spec" field.
	CategorySpec string `json:"category_spec,omitempty"`
	// SoldOut holds the value of the "sold_out" field.
	SoldOut bool `json:"sold_out,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges        ProductEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// Store holds the value of the store edge.
	Store *Store `json:"store,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StoreOrErr returns the Store value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) StoreOrErr() (*Store, error) {
	if e.loadedTypes[0] {
		if e.Store == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: store.Label}
		}
		return e.Store, nil
	}
	return nil, &NotLoadedError{edge: "store"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldIsSale, product.FieldSoldOut:
			values[i] = new(sql.NullBool)
		case product.FieldRetailPrice, product.FieldSalePrice:
			values[i] = new(sql.NullFloat64)
		case product.FieldID:
			values[i] = new(sql.NullInt64)
		case product.FieldStoreName, product.FieldBrand, product.FieldProductName, product.FieldProductImgURL, product.FieldProductURL, product.FieldCurrencyCode, product.FieldMadeIn, product.FieldKorBrand, product.FieldKorProductName, product.FieldProductID, product.FieldGender, product.FieldColor, product.FieldCategory, product.FieldCategorySpec:
			values[i] = new(sql.NullString)
		case product.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case product.FieldStoreName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field store_name", values[i])
			} else if value.Valid {
				pr.StoreName = value.String
			}
		case product.FieldBrand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand", values[i])
			} else if value.Valid {
				pr.Brand = value.String
			}
		case product.FieldProductName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_name", values[i])
			} else if value.Valid {
				pr.ProductName = value.String
			}
		case product.FieldProductImgURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_img_url", values[i])
			} else if value.Valid {
				pr.ProductImgURL = value.String
			}
		case product.FieldProductURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_url", values[i])
			} else if value.Valid {
				pr.ProductURL = value.String
			}
		case product.FieldCurrencyCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency_code", values[i])
			} else if value.Valid {
				pr.CurrencyCode = value.String
			}
		case product.FieldRetailPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field retail_price", values[i])
			} else if value.Valid {
				pr.RetailPrice = value.Float64
			}
		case product.FieldSalePrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field sale_price", values[i])
			} else if value.Valid {
				pr.SalePrice = value.Float64
			}
		case product.FieldIsSale:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_sale", values[i])
			} else if value.Valid {
				pr.IsSale = value.Bool
			}
		case product.FieldMadeIn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field made_in", values[i])
			} else if value.Valid {
				pr.MadeIn = value.String
			}
		case product.FieldKorBrand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kor_brand", values[i])
			} else if value.Valid {
				pr.KorBrand = value.String
			}
		case product.FieldKorProductName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kor_product_name", values[i])
			} else if value.Valid {
				pr.KorProductName = value.String
			}
		case product.FieldProductID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				pr.ProductID = value.String
			}
		case product.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				pr.Gender = value.String
			}
		case product.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				pr.Color = value.String
			}
		case product.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				pr.Category = value.String
			}
		case product.FieldCategorySpec:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category_spec", values[i])
			} else if value.Valid {
				pr.CategorySpec = value.String
			}
		case product.FieldSoldOut:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field sold_out", values[i])
			} else if value.Valid {
				pr.SoldOut = value.Bool
			}
		case product.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Product.
// This includes values selected through modifiers, order, etc.
func (pr *Product) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryStore queries the "store" edge of the Product entity.
func (pr *Product) QueryStore() *StoreQuery {
	return NewProductClient(pr.config).QueryStore(pr)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return NewProductClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("store_name=")
	builder.WriteString(pr.StoreName)
	builder.WriteString(", ")
	builder.WriteString("brand=")
	builder.WriteString(pr.Brand)
	builder.WriteString(", ")
	builder.WriteString("product_name=")
	builder.WriteString(pr.ProductName)
	builder.WriteString(", ")
	builder.WriteString("product_img_url=")
	builder.WriteString(pr.ProductImgURL)
	builder.WriteString(", ")
	builder.WriteString("product_url=")
	builder.WriteString(pr.ProductURL)
	builder.WriteString(", ")
	builder.WriteString("currency_code=")
	builder.WriteString(pr.CurrencyCode)
	builder.WriteString(", ")
	builder.WriteString("retail_price=")
	builder.WriteString(fmt.Sprintf("%v", pr.RetailPrice))
	builder.WriteString(", ")
	builder.WriteString("sale_price=")
	builder.WriteString(fmt.Sprintf("%v", pr.SalePrice))
	builder.WriteString(", ")
	builder.WriteString("is_sale=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsSale))
	builder.WriteString(", ")
	builder.WriteString("made_in=")
	builder.WriteString(pr.MadeIn)
	builder.WriteString(", ")
	builder.WriteString("kor_brand=")
	builder.WriteString(pr.KorBrand)
	builder.WriteString(", ")
	builder.WriteString("kor_product_name=")
	builder.WriteString(pr.KorProductName)
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(pr.ProductID)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(pr.Gender)
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(pr.Color)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(pr.Category)
	builder.WriteString(", ")
	builder.WriteString("category_spec=")
	builder.WriteString(pr.CategorySpec)
	builder.WriteString(", ")
	builder.WriteString("sold_out=")
	builder.WriteString(fmt.Sprintf("%v", pr.SoldOut))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product
