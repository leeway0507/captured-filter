// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/product"
	"backend/ent/store"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetStoreName sets the "store_name" field.
func (pu *ProductUpdate) SetStoreName(s string) *ProductUpdate {
	pu.mutation.SetStoreName(s)
	return pu
}

// SetNillableStoreName sets the "store_name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableStoreName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetStoreName(*s)
	}
	return pu
}

// ClearStoreName clears the value of the "store_name" field.
func (pu *ProductUpdate) ClearStoreName() *ProductUpdate {
	pu.mutation.ClearStoreName()
	return pu
}

// SetBrand sets the "brand" field.
func (pu *ProductUpdate) SetBrand(s string) *ProductUpdate {
	pu.mutation.SetBrand(s)
	return pu
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableBrand(s *string) *ProductUpdate {
	if s != nil {
		pu.SetBrand(*s)
	}
	return pu
}

// SetProductName sets the "product_name" field.
func (pu *ProductUpdate) SetProductName(s string) *ProductUpdate {
	pu.mutation.SetProductName(s)
	return pu
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetProductName(*s)
	}
	return pu
}

// SetProductImgURL sets the "product_img_url" field.
func (pu *ProductUpdate) SetProductImgURL(s string) *ProductUpdate {
	pu.mutation.SetProductImgURL(s)
	return pu
}

// SetNillableProductImgURL sets the "product_img_url" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductImgURL(s *string) *ProductUpdate {
	if s != nil {
		pu.SetProductImgURL(*s)
	}
	return pu
}

// SetProductURL sets the "product_url" field.
func (pu *ProductUpdate) SetProductURL(s string) *ProductUpdate {
	pu.mutation.SetProductURL(s)
	return pu
}

// SetNillableProductURL sets the "product_url" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductURL(s *string) *ProductUpdate {
	if s != nil {
		pu.SetProductURL(*s)
	}
	return pu
}

// SetPriceCurrency sets the "price_currency" field.
func (pu *ProductUpdate) SetPriceCurrency(s string) *ProductUpdate {
	pu.mutation.SetPriceCurrency(s)
	return pu
}

// SetNillablePriceCurrency sets the "price_currency" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePriceCurrency(s *string) *ProductUpdate {
	if s != nil {
		pu.SetPriceCurrency(*s)
	}
	return pu
}

// SetRetailPrice sets the "retail_price" field.
func (pu *ProductUpdate) SetRetailPrice(f float64) *ProductUpdate {
	pu.mutation.ResetRetailPrice()
	pu.mutation.SetRetailPrice(f)
	return pu
}

// SetNillableRetailPrice sets the "retail_price" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableRetailPrice(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetRetailPrice(*f)
	}
	return pu
}

// AddRetailPrice adds f to the "retail_price" field.
func (pu *ProductUpdate) AddRetailPrice(f float64) *ProductUpdate {
	pu.mutation.AddRetailPrice(f)
	return pu
}

// SetSalePrice sets the "sale_price" field.
func (pu *ProductUpdate) SetSalePrice(f float64) *ProductUpdate {
	pu.mutation.ResetSalePrice()
	pu.mutation.SetSalePrice(f)
	return pu
}

// SetNillableSalePrice sets the "sale_price" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableSalePrice(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetSalePrice(*f)
	}
	return pu
}

// AddSalePrice adds f to the "sale_price" field.
func (pu *ProductUpdate) AddSalePrice(f float64) *ProductUpdate {
	pu.mutation.AddSalePrice(f)
	return pu
}

// SetKorBrand sets the "kor_brand" field.
func (pu *ProductUpdate) SetKorBrand(s string) *ProductUpdate {
	pu.mutation.SetKorBrand(s)
	return pu
}

// SetNillableKorBrand sets the "kor_brand" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableKorBrand(s *string) *ProductUpdate {
	if s != nil {
		pu.SetKorBrand(*s)
	}
	return pu
}

// ClearKorBrand clears the value of the "kor_brand" field.
func (pu *ProductUpdate) ClearKorBrand() *ProductUpdate {
	pu.mutation.ClearKorBrand()
	return pu
}

// SetKorProductName sets the "kor_product_name" field.
func (pu *ProductUpdate) SetKorProductName(s string) *ProductUpdate {
	pu.mutation.SetKorProductName(s)
	return pu
}

// SetNillableKorProductName sets the "kor_product_name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableKorProductName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetKorProductName(*s)
	}
	return pu
}

// ClearKorProductName clears the value of the "kor_product_name" field.
func (pu *ProductUpdate) ClearKorProductName() *ProductUpdate {
	pu.mutation.ClearKorProductName()
	return pu
}

// SetProductID sets the "product_id" field.
func (pu *ProductUpdate) SetProductID(s string) *ProductUpdate {
	pu.mutation.SetProductID(s)
	return pu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductID(s *string) *ProductUpdate {
	if s != nil {
		pu.SetProductID(*s)
	}
	return pu
}

// ClearProductID clears the value of the "product_id" field.
func (pu *ProductUpdate) ClearProductID() *ProductUpdate {
	pu.mutation.ClearProductID()
	return pu
}

// SetGender sets the "gender" field.
func (pu *ProductUpdate) SetGender(s string) *ProductUpdate {
	pu.mutation.SetGender(s)
	return pu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableGender(s *string) *ProductUpdate {
	if s != nil {
		pu.SetGender(*s)
	}
	return pu
}

// ClearGender clears the value of the "gender" field.
func (pu *ProductUpdate) ClearGender() *ProductUpdate {
	pu.mutation.ClearGender()
	return pu
}

// SetColor sets the "color" field.
func (pu *ProductUpdate) SetColor(s string) *ProductUpdate {
	pu.mutation.SetColor(s)
	return pu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableColor(s *string) *ProductUpdate {
	if s != nil {
		pu.SetColor(*s)
	}
	return pu
}

// ClearColor clears the value of the "color" field.
func (pu *ProductUpdate) ClearColor() *ProductUpdate {
	pu.mutation.ClearColor()
	return pu
}

// SetCategory sets the "category" field.
func (pu *ProductUpdate) SetCategory(s string) *ProductUpdate {
	pu.mutation.SetCategory(s)
	return pu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCategory(s *string) *ProductUpdate {
	if s != nil {
		pu.SetCategory(*s)
	}
	return pu
}

// ClearCategory clears the value of the "category" field.
func (pu *ProductUpdate) ClearCategory() *ProductUpdate {
	pu.mutation.ClearCategory()
	return pu
}

// SetCategorySpec sets the "category_spec" field.
func (pu *ProductUpdate) SetCategorySpec(s string) *ProductUpdate {
	pu.mutation.SetCategorySpec(s)
	return pu
}

// SetNillableCategorySpec sets the "category_spec" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCategorySpec(s *string) *ProductUpdate {
	if s != nil {
		pu.SetCategorySpec(*s)
	}
	return pu
}

// ClearCategorySpec clears the value of the "category_spec" field.
func (pu *ProductUpdate) ClearCategorySpec() *ProductUpdate {
	pu.mutation.ClearCategorySpec()
	return pu
}

// SetSoldOut sets the "sold_out" field.
func (pu *ProductUpdate) SetSoldOut(b bool) *ProductUpdate {
	pu.mutation.SetSoldOut(b)
	return pu
}

// SetNillableSoldOut sets the "sold_out" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableSoldOut(b *bool) *ProductUpdate {
	if b != nil {
		pu.SetSoldOut(*b)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProductUpdate) SetUpdatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableUpdatedAt(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetUpdatedAt(*t)
	}
	return pu
}

// SetStoreID sets the "store" edge to the Store entity by ID.
func (pu *ProductUpdate) SetStoreID(id string) *ProductUpdate {
	pu.mutation.SetStoreID(id)
	return pu
}

// SetNillableStoreID sets the "store" edge to the Store entity by ID if the given value is not nil.
func (pu *ProductUpdate) SetNillableStoreID(id *string) *ProductUpdate {
	if id != nil {
		pu = pu.SetStoreID(*id)
	}
	return pu
}

// SetStore sets the "store" edge to the Store entity.
func (pu *ProductUpdate) SetStore(s *Store) *ProductUpdate {
	return pu.SetStoreID(s.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearStore clears the "store" edge to the Store entity.
func (pu *ProductUpdate) ClearStore() *ProductUpdate {
	pu.mutation.ClearStore()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Brand(); ok {
		_spec.SetField(product.FieldBrand, field.TypeString, value)
	}
	if value, ok := pu.mutation.ProductName(); ok {
		_spec.SetField(product.FieldProductName, field.TypeString, value)
	}
	if value, ok := pu.mutation.ProductImgURL(); ok {
		_spec.SetField(product.FieldProductImgURL, field.TypeString, value)
	}
	if value, ok := pu.mutation.ProductURL(); ok {
		_spec.SetField(product.FieldProductURL, field.TypeString, value)
	}
	if value, ok := pu.mutation.PriceCurrency(); ok {
		_spec.SetField(product.FieldPriceCurrency, field.TypeString, value)
	}
	if value, ok := pu.mutation.RetailPrice(); ok {
		_spec.SetField(product.FieldRetailPrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedRetailPrice(); ok {
		_spec.AddField(product.FieldRetailPrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.SalePrice(); ok {
		_spec.SetField(product.FieldSalePrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedSalePrice(); ok {
		_spec.AddField(product.FieldSalePrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.KorBrand(); ok {
		_spec.SetField(product.FieldKorBrand, field.TypeString, value)
	}
	if pu.mutation.KorBrandCleared() {
		_spec.ClearField(product.FieldKorBrand, field.TypeString)
	}
	if value, ok := pu.mutation.KorProductName(); ok {
		_spec.SetField(product.FieldKorProductName, field.TypeString, value)
	}
	if pu.mutation.KorProductNameCleared() {
		_spec.ClearField(product.FieldKorProductName, field.TypeString)
	}
	if value, ok := pu.mutation.ProductID(); ok {
		_spec.SetField(product.FieldProductID, field.TypeString, value)
	}
	if pu.mutation.ProductIDCleared() {
		_spec.ClearField(product.FieldProductID, field.TypeString)
	}
	if value, ok := pu.mutation.Gender(); ok {
		_spec.SetField(product.FieldGender, field.TypeString, value)
	}
	if pu.mutation.GenderCleared() {
		_spec.ClearField(product.FieldGender, field.TypeString)
	}
	if value, ok := pu.mutation.Color(); ok {
		_spec.SetField(product.FieldColor, field.TypeString, value)
	}
	if pu.mutation.ColorCleared() {
		_spec.ClearField(product.FieldColor, field.TypeString)
	}
	if value, ok := pu.mutation.Category(); ok {
		_spec.SetField(product.FieldCategory, field.TypeString, value)
	}
	if pu.mutation.CategoryCleared() {
		_spec.ClearField(product.FieldCategory, field.TypeString)
	}
	if value, ok := pu.mutation.CategorySpec(); ok {
		_spec.SetField(product.FieldCategorySpec, field.TypeString, value)
	}
	if pu.mutation.CategorySpecCleared() {
		_spec.ClearField(product.FieldCategorySpec, field.TypeString)
	}
	if value, ok := pu.mutation.SoldOut(); ok {
		_spec.SetField(product.FieldSoldOut, field.TypeBool, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.StoreTable,
			Columns: []string{product.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.StoreTable,
			Columns: []string{product.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetStoreName sets the "store_name" field.
func (puo *ProductUpdateOne) SetStoreName(s string) *ProductUpdateOne {
	puo.mutation.SetStoreName(s)
	return puo
}

// SetNillableStoreName sets the "store_name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableStoreName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetStoreName(*s)
	}
	return puo
}

// ClearStoreName clears the value of the "store_name" field.
func (puo *ProductUpdateOne) ClearStoreName() *ProductUpdateOne {
	puo.mutation.ClearStoreName()
	return puo
}

// SetBrand sets the "brand" field.
func (puo *ProductUpdateOne) SetBrand(s string) *ProductUpdateOne {
	puo.mutation.SetBrand(s)
	return puo
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableBrand(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetBrand(*s)
	}
	return puo
}

// SetProductName sets the "product_name" field.
func (puo *ProductUpdateOne) SetProductName(s string) *ProductUpdateOne {
	puo.mutation.SetProductName(s)
	return puo
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetProductName(*s)
	}
	return puo
}

// SetProductImgURL sets the "product_img_url" field.
func (puo *ProductUpdateOne) SetProductImgURL(s string) *ProductUpdateOne {
	puo.mutation.SetProductImgURL(s)
	return puo
}

// SetNillableProductImgURL sets the "product_img_url" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductImgURL(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetProductImgURL(*s)
	}
	return puo
}

// SetProductURL sets the "product_url" field.
func (puo *ProductUpdateOne) SetProductURL(s string) *ProductUpdateOne {
	puo.mutation.SetProductURL(s)
	return puo
}

// SetNillableProductURL sets the "product_url" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductURL(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetProductURL(*s)
	}
	return puo
}

// SetPriceCurrency sets the "price_currency" field.
func (puo *ProductUpdateOne) SetPriceCurrency(s string) *ProductUpdateOne {
	puo.mutation.SetPriceCurrency(s)
	return puo
}

// SetNillablePriceCurrency sets the "price_currency" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePriceCurrency(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetPriceCurrency(*s)
	}
	return puo
}

// SetRetailPrice sets the "retail_price" field.
func (puo *ProductUpdateOne) SetRetailPrice(f float64) *ProductUpdateOne {
	puo.mutation.ResetRetailPrice()
	puo.mutation.SetRetailPrice(f)
	return puo
}

// SetNillableRetailPrice sets the "retail_price" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableRetailPrice(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetRetailPrice(*f)
	}
	return puo
}

// AddRetailPrice adds f to the "retail_price" field.
func (puo *ProductUpdateOne) AddRetailPrice(f float64) *ProductUpdateOne {
	puo.mutation.AddRetailPrice(f)
	return puo
}

// SetSalePrice sets the "sale_price" field.
func (puo *ProductUpdateOne) SetSalePrice(f float64) *ProductUpdateOne {
	puo.mutation.ResetSalePrice()
	puo.mutation.SetSalePrice(f)
	return puo
}

// SetNillableSalePrice sets the "sale_price" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableSalePrice(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetSalePrice(*f)
	}
	return puo
}

// AddSalePrice adds f to the "sale_price" field.
func (puo *ProductUpdateOne) AddSalePrice(f float64) *ProductUpdateOne {
	puo.mutation.AddSalePrice(f)
	return puo
}

// SetKorBrand sets the "kor_brand" field.
func (puo *ProductUpdateOne) SetKorBrand(s string) *ProductUpdateOne {
	puo.mutation.SetKorBrand(s)
	return puo
}

// SetNillableKorBrand sets the "kor_brand" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableKorBrand(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetKorBrand(*s)
	}
	return puo
}

// ClearKorBrand clears the value of the "kor_brand" field.
func (puo *ProductUpdateOne) ClearKorBrand() *ProductUpdateOne {
	puo.mutation.ClearKorBrand()
	return puo
}

// SetKorProductName sets the "kor_product_name" field.
func (puo *ProductUpdateOne) SetKorProductName(s string) *ProductUpdateOne {
	puo.mutation.SetKorProductName(s)
	return puo
}

// SetNillableKorProductName sets the "kor_product_name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableKorProductName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetKorProductName(*s)
	}
	return puo
}

// ClearKorProductName clears the value of the "kor_product_name" field.
func (puo *ProductUpdateOne) ClearKorProductName() *ProductUpdateOne {
	puo.mutation.ClearKorProductName()
	return puo
}

// SetProductID sets the "product_id" field.
func (puo *ProductUpdateOne) SetProductID(s string) *ProductUpdateOne {
	puo.mutation.SetProductID(s)
	return puo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductID(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetProductID(*s)
	}
	return puo
}

// ClearProductID clears the value of the "product_id" field.
func (puo *ProductUpdateOne) ClearProductID() *ProductUpdateOne {
	puo.mutation.ClearProductID()
	return puo
}

// SetGender sets the "gender" field.
func (puo *ProductUpdateOne) SetGender(s string) *ProductUpdateOne {
	puo.mutation.SetGender(s)
	return puo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableGender(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetGender(*s)
	}
	return puo
}

// ClearGender clears the value of the "gender" field.
func (puo *ProductUpdateOne) ClearGender() *ProductUpdateOne {
	puo.mutation.ClearGender()
	return puo
}

// SetColor sets the "color" field.
func (puo *ProductUpdateOne) SetColor(s string) *ProductUpdateOne {
	puo.mutation.SetColor(s)
	return puo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableColor(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetColor(*s)
	}
	return puo
}

// ClearColor clears the value of the "color" field.
func (puo *ProductUpdateOne) ClearColor() *ProductUpdateOne {
	puo.mutation.ClearColor()
	return puo
}

// SetCategory sets the "category" field.
func (puo *ProductUpdateOne) SetCategory(s string) *ProductUpdateOne {
	puo.mutation.SetCategory(s)
	return puo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCategory(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetCategory(*s)
	}
	return puo
}

// ClearCategory clears the value of the "category" field.
func (puo *ProductUpdateOne) ClearCategory() *ProductUpdateOne {
	puo.mutation.ClearCategory()
	return puo
}

// SetCategorySpec sets the "category_spec" field.
func (puo *ProductUpdateOne) SetCategorySpec(s string) *ProductUpdateOne {
	puo.mutation.SetCategorySpec(s)
	return puo
}

// SetNillableCategorySpec sets the "category_spec" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCategorySpec(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetCategorySpec(*s)
	}
	return puo
}

// ClearCategorySpec clears the value of the "category_spec" field.
func (puo *ProductUpdateOne) ClearCategorySpec() *ProductUpdateOne {
	puo.mutation.ClearCategorySpec()
	return puo
}

// SetSoldOut sets the "sold_out" field.
func (puo *ProductUpdateOne) SetSoldOut(b bool) *ProductUpdateOne {
	puo.mutation.SetSoldOut(b)
	return puo
}

// SetNillableSoldOut sets the "sold_out" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableSoldOut(b *bool) *ProductUpdateOne {
	if b != nil {
		puo.SetSoldOut(*b)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProductUpdateOne) SetUpdatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableUpdatedAt(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetUpdatedAt(*t)
	}
	return puo
}

// SetStoreID sets the "store" edge to the Store entity by ID.
func (puo *ProductUpdateOne) SetStoreID(id string) *ProductUpdateOne {
	puo.mutation.SetStoreID(id)
	return puo
}

// SetNillableStoreID sets the "store" edge to the Store entity by ID if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableStoreID(id *string) *ProductUpdateOne {
	if id != nil {
		puo = puo.SetStoreID(*id)
	}
	return puo
}

// SetStore sets the "store" edge to the Store entity.
func (puo *ProductUpdateOne) SetStore(s *Store) *ProductUpdateOne {
	return puo.SetStoreID(s.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearStore clears the "store" edge to the Store entity.
func (puo *ProductUpdateOne) ClearStore() *ProductUpdateOne {
	puo.mutation.ClearStore()
	return puo
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Brand(); ok {
		_spec.SetField(product.FieldBrand, field.TypeString, value)
	}
	if value, ok := puo.mutation.ProductName(); ok {
		_spec.SetField(product.FieldProductName, field.TypeString, value)
	}
	if value, ok := puo.mutation.ProductImgURL(); ok {
		_spec.SetField(product.FieldProductImgURL, field.TypeString, value)
	}
	if value, ok := puo.mutation.ProductURL(); ok {
		_spec.SetField(product.FieldProductURL, field.TypeString, value)
	}
	if value, ok := puo.mutation.PriceCurrency(); ok {
		_spec.SetField(product.FieldPriceCurrency, field.TypeString, value)
	}
	if value, ok := puo.mutation.RetailPrice(); ok {
		_spec.SetField(product.FieldRetailPrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedRetailPrice(); ok {
		_spec.AddField(product.FieldRetailPrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.SalePrice(); ok {
		_spec.SetField(product.FieldSalePrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedSalePrice(); ok {
		_spec.AddField(product.FieldSalePrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.KorBrand(); ok {
		_spec.SetField(product.FieldKorBrand, field.TypeString, value)
	}
	if puo.mutation.KorBrandCleared() {
		_spec.ClearField(product.FieldKorBrand, field.TypeString)
	}
	if value, ok := puo.mutation.KorProductName(); ok {
		_spec.SetField(product.FieldKorProductName, field.TypeString, value)
	}
	if puo.mutation.KorProductNameCleared() {
		_spec.ClearField(product.FieldKorProductName, field.TypeString)
	}
	if value, ok := puo.mutation.ProductID(); ok {
		_spec.SetField(product.FieldProductID, field.TypeString, value)
	}
	if puo.mutation.ProductIDCleared() {
		_spec.ClearField(product.FieldProductID, field.TypeString)
	}
	if value, ok := puo.mutation.Gender(); ok {
		_spec.SetField(product.FieldGender, field.TypeString, value)
	}
	if puo.mutation.GenderCleared() {
		_spec.ClearField(product.FieldGender, field.TypeString)
	}
	if value, ok := puo.mutation.Color(); ok {
		_spec.SetField(product.FieldColor, field.TypeString, value)
	}
	if puo.mutation.ColorCleared() {
		_spec.ClearField(product.FieldColor, field.TypeString)
	}
	if value, ok := puo.mutation.Category(); ok {
		_spec.SetField(product.FieldCategory, field.TypeString, value)
	}
	if puo.mutation.CategoryCleared() {
		_spec.ClearField(product.FieldCategory, field.TypeString)
	}
	if value, ok := puo.mutation.CategorySpec(); ok {
		_spec.SetField(product.FieldCategorySpec, field.TypeString, value)
	}
	if puo.mutation.CategorySpecCleared() {
		_spec.ClearField(product.FieldCategorySpec, field.TypeString)
	}
	if value, ok := puo.mutation.SoldOut(); ok {
		_spec.SetField(product.FieldSoldOut, field.TypeBool, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.StoreTable,
			Columns: []string{product.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.StoreTable,
			Columns: []string{product.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
