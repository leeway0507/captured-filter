// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/deliveryagency"
	"backend/ent/schema"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryAgencyCreate is the builder for creating a DeliveryAgency entity.
type DeliveryAgencyCreate struct {
	config
	mutation *DeliveryAgencyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCountry sets the "country" field.
func (dac *DeliveryAgencyCreate) SetCountry(s string) *DeliveryAgencyCreate {
	dac.mutation.SetCountry(s)
	return dac
}

// SetVATReductionRate sets the "VAT_reduction_rate" field.
func (dac *DeliveryAgencyCreate) SetVATReductionRate(f float64) *DeliveryAgencyCreate {
	dac.mutation.SetVATReductionRate(f)
	return dac
}

// SetShippingFee sets the "shipping_fee" field.
func (dac *DeliveryAgencyCreate) SetShippingFee(ssf *schema.AgencyShippingFee) *DeliveryAgencyCreate {
	dac.mutation.SetShippingFee(ssf)
	return dac
}

// SetUpdatedAt sets the "updated_at" field.
func (dac *DeliveryAgencyCreate) SetUpdatedAt(t time.Time) *DeliveryAgencyCreate {
	dac.mutation.SetUpdatedAt(t)
	return dac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dac *DeliveryAgencyCreate) SetNillableUpdatedAt(t *time.Time) *DeliveryAgencyCreate {
	if t != nil {
		dac.SetUpdatedAt(*t)
	}
	return dac
}

// Mutation returns the DeliveryAgencyMutation object of the builder.
func (dac *DeliveryAgencyCreate) Mutation() *DeliveryAgencyMutation {
	return dac.mutation
}

// Save creates the DeliveryAgency in the database.
func (dac *DeliveryAgencyCreate) Save(ctx context.Context) (*DeliveryAgency, error) {
	dac.defaults()
	return withHooks(ctx, dac.sqlSave, dac.mutation, dac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dac *DeliveryAgencyCreate) SaveX(ctx context.Context) *DeliveryAgency {
	v, err := dac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dac *DeliveryAgencyCreate) Exec(ctx context.Context) error {
	_, err := dac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dac *DeliveryAgencyCreate) ExecX(ctx context.Context) {
	if err := dac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dac *DeliveryAgencyCreate) defaults() {
	if _, ok := dac.mutation.UpdatedAt(); !ok {
		v := deliveryagency.DefaultUpdatedAt()
		dac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dac *DeliveryAgencyCreate) check() error {
	if _, ok := dac.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "DeliveryAgency.country"`)}
	}
	if _, ok := dac.mutation.VATReductionRate(); !ok {
		return &ValidationError{Name: "VAT_reduction_rate", err: errors.New(`ent: missing required field "DeliveryAgency.VAT_reduction_rate"`)}
	}
	if _, ok := dac.mutation.ShippingFee(); !ok {
		return &ValidationError{Name: "shipping_fee", err: errors.New(`ent: missing required field "DeliveryAgency.shipping_fee"`)}
	}
	if _, ok := dac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DeliveryAgency.updated_at"`)}
	}
	return nil
}

func (dac *DeliveryAgencyCreate) sqlSave(ctx context.Context) (*DeliveryAgency, error) {
	if err := dac.check(); err != nil {
		return nil, err
	}
	_node, _spec := dac.createSpec()
	if err := sqlgraph.CreateNode(ctx, dac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dac.mutation.id = &_node.ID
	dac.mutation.done = true
	return _node, nil
}

func (dac *DeliveryAgencyCreate) createSpec() (*DeliveryAgency, *sqlgraph.CreateSpec) {
	var (
		_node = &DeliveryAgency{config: dac.config}
		_spec = sqlgraph.NewCreateSpec(deliveryagency.Table, sqlgraph.NewFieldSpec(deliveryagency.FieldID, field.TypeInt))
	)
	_spec.OnConflict = dac.conflict
	if value, ok := dac.mutation.Country(); ok {
		_spec.SetField(deliveryagency.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := dac.mutation.VATReductionRate(); ok {
		_spec.SetField(deliveryagency.FieldVATReductionRate, field.TypeFloat64, value)
		_node.VATReductionRate = value
	}
	if value, ok := dac.mutation.ShippingFee(); ok {
		_spec.SetField(deliveryagency.FieldShippingFee, field.TypeJSON, value)
		_node.ShippingFee = value
	}
	if value, ok := dac.mutation.UpdatedAt(); ok {
		_spec.SetField(deliveryagency.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeliveryAgency.Create().
//		SetCountry(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeliveryAgencyUpsert) {
//			SetCountry(v+v).
//		}).
//		Exec(ctx)
func (dac *DeliveryAgencyCreate) OnConflict(opts ...sql.ConflictOption) *DeliveryAgencyUpsertOne {
	dac.conflict = opts
	return &DeliveryAgencyUpsertOne{
		create: dac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeliveryAgency.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dac *DeliveryAgencyCreate) OnConflictColumns(columns ...string) *DeliveryAgencyUpsertOne {
	dac.conflict = append(dac.conflict, sql.ConflictColumns(columns...))
	return &DeliveryAgencyUpsertOne{
		create: dac,
	}
}

type (
	// DeliveryAgencyUpsertOne is the builder for "upsert"-ing
	//  one DeliveryAgency node.
	DeliveryAgencyUpsertOne struct {
		create *DeliveryAgencyCreate
	}

	// DeliveryAgencyUpsert is the "OnConflict" setter.
	DeliveryAgencyUpsert struct {
		*sql.UpdateSet
	}
)

// SetCountry sets the "country" field.
func (u *DeliveryAgencyUpsert) SetCountry(v string) *DeliveryAgencyUpsert {
	u.Set(deliveryagency.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *DeliveryAgencyUpsert) UpdateCountry() *DeliveryAgencyUpsert {
	u.SetExcluded(deliveryagency.FieldCountry)
	return u
}

// SetVATReductionRate sets the "VAT_reduction_rate" field.
func (u *DeliveryAgencyUpsert) SetVATReductionRate(v float64) *DeliveryAgencyUpsert {
	u.Set(deliveryagency.FieldVATReductionRate, v)
	return u
}

// UpdateVATReductionRate sets the "VAT_reduction_rate" field to the value that was provided on create.
func (u *DeliveryAgencyUpsert) UpdateVATReductionRate() *DeliveryAgencyUpsert {
	u.SetExcluded(deliveryagency.FieldVATReductionRate)
	return u
}

// AddVATReductionRate adds v to the "VAT_reduction_rate" field.
func (u *DeliveryAgencyUpsert) AddVATReductionRate(v float64) *DeliveryAgencyUpsert {
	u.Add(deliveryagency.FieldVATReductionRate, v)
	return u
}

// SetShippingFee sets the "shipping_fee" field.
func (u *DeliveryAgencyUpsert) SetShippingFee(v *schema.AgencyShippingFee) *DeliveryAgencyUpsert {
	u.Set(deliveryagency.FieldShippingFee, v)
	return u
}

// UpdateShippingFee sets the "shipping_fee" field to the value that was provided on create.
func (u *DeliveryAgencyUpsert) UpdateShippingFee() *DeliveryAgencyUpsert {
	u.SetExcluded(deliveryagency.FieldShippingFee)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeliveryAgencyUpsert) SetUpdatedAt(v time.Time) *DeliveryAgencyUpsert {
	u.Set(deliveryagency.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeliveryAgencyUpsert) UpdateUpdatedAt() *DeliveryAgencyUpsert {
	u.SetExcluded(deliveryagency.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.DeliveryAgency.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DeliveryAgencyUpsertOne) UpdateNewValues() *DeliveryAgencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeliveryAgency.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DeliveryAgencyUpsertOne) Ignore() *DeliveryAgencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeliveryAgencyUpsertOne) DoNothing() *DeliveryAgencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeliveryAgencyCreate.OnConflict
// documentation for more info.
func (u *DeliveryAgencyUpsertOne) Update(set func(*DeliveryAgencyUpsert)) *DeliveryAgencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeliveryAgencyUpsert{UpdateSet: update})
	}))
	return u
}

// SetCountry sets the "country" field.
func (u *DeliveryAgencyUpsertOne) SetCountry(v string) *DeliveryAgencyUpsertOne {
	return u.Update(func(s *DeliveryAgencyUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *DeliveryAgencyUpsertOne) UpdateCountry() *DeliveryAgencyUpsertOne {
	return u.Update(func(s *DeliveryAgencyUpsert) {
		s.UpdateCountry()
	})
}

// SetVATReductionRate sets the "VAT_reduction_rate" field.
func (u *DeliveryAgencyUpsertOne) SetVATReductionRate(v float64) *DeliveryAgencyUpsertOne {
	return u.Update(func(s *DeliveryAgencyUpsert) {
		s.SetVATReductionRate(v)
	})
}

// AddVATReductionRate adds v to the "VAT_reduction_rate" field.
func (u *DeliveryAgencyUpsertOne) AddVATReductionRate(v float64) *DeliveryAgencyUpsertOne {
	return u.Update(func(s *DeliveryAgencyUpsert) {
		s.AddVATReductionRate(v)
	})
}

// UpdateVATReductionRate sets the "VAT_reduction_rate" field to the value that was provided on create.
func (u *DeliveryAgencyUpsertOne) UpdateVATReductionRate() *DeliveryAgencyUpsertOne {
	return u.Update(func(s *DeliveryAgencyUpsert) {
		s.UpdateVATReductionRate()
	})
}

// SetShippingFee sets the "shipping_fee" field.
func (u *DeliveryAgencyUpsertOne) SetShippingFee(v *schema.AgencyShippingFee) *DeliveryAgencyUpsertOne {
	return u.Update(func(s *DeliveryAgencyUpsert) {
		s.SetShippingFee(v)
	})
}

// UpdateShippingFee sets the "shipping_fee" field to the value that was provided on create.
func (u *DeliveryAgencyUpsertOne) UpdateShippingFee() *DeliveryAgencyUpsertOne {
	return u.Update(func(s *DeliveryAgencyUpsert) {
		s.UpdateShippingFee()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeliveryAgencyUpsertOne) SetUpdatedAt(v time.Time) *DeliveryAgencyUpsertOne {
	return u.Update(func(s *DeliveryAgencyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeliveryAgencyUpsertOne) UpdateUpdatedAt() *DeliveryAgencyUpsertOne {
	return u.Update(func(s *DeliveryAgencyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DeliveryAgencyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeliveryAgencyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeliveryAgencyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeliveryAgencyUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeliveryAgencyUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeliveryAgencyCreateBulk is the builder for creating many DeliveryAgency entities in bulk.
type DeliveryAgencyCreateBulk struct {
	config
	err      error
	builders []*DeliveryAgencyCreate
	conflict []sql.ConflictOption
}

// Save creates the DeliveryAgency entities in the database.
func (dacb *DeliveryAgencyCreateBulk) Save(ctx context.Context) ([]*DeliveryAgency, error) {
	if dacb.err != nil {
		return nil, dacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dacb.builders))
	nodes := make([]*DeliveryAgency, len(dacb.builders))
	mutators := make([]Mutator, len(dacb.builders))
	for i := range dacb.builders {
		func(i int, root context.Context) {
			builder := dacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeliveryAgencyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dacb *DeliveryAgencyCreateBulk) SaveX(ctx context.Context) []*DeliveryAgency {
	v, err := dacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dacb *DeliveryAgencyCreateBulk) Exec(ctx context.Context) error {
	_, err := dacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dacb *DeliveryAgencyCreateBulk) ExecX(ctx context.Context) {
	if err := dacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeliveryAgency.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeliveryAgencyUpsert) {
//			SetCountry(v+v).
//		}).
//		Exec(ctx)
func (dacb *DeliveryAgencyCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeliveryAgencyUpsertBulk {
	dacb.conflict = opts
	return &DeliveryAgencyUpsertBulk{
		create: dacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeliveryAgency.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dacb *DeliveryAgencyCreateBulk) OnConflictColumns(columns ...string) *DeliveryAgencyUpsertBulk {
	dacb.conflict = append(dacb.conflict, sql.ConflictColumns(columns...))
	return &DeliveryAgencyUpsertBulk{
		create: dacb,
	}
}

// DeliveryAgencyUpsertBulk is the builder for "upsert"-ing
// a bulk of DeliveryAgency nodes.
type DeliveryAgencyUpsertBulk struct {
	create *DeliveryAgencyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeliveryAgency.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DeliveryAgencyUpsertBulk) UpdateNewValues() *DeliveryAgencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeliveryAgency.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DeliveryAgencyUpsertBulk) Ignore() *DeliveryAgencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeliveryAgencyUpsertBulk) DoNothing() *DeliveryAgencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeliveryAgencyCreateBulk.OnConflict
// documentation for more info.
func (u *DeliveryAgencyUpsertBulk) Update(set func(*DeliveryAgencyUpsert)) *DeliveryAgencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeliveryAgencyUpsert{UpdateSet: update})
	}))
	return u
}

// SetCountry sets the "country" field.
func (u *DeliveryAgencyUpsertBulk) SetCountry(v string) *DeliveryAgencyUpsertBulk {
	return u.Update(func(s *DeliveryAgencyUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *DeliveryAgencyUpsertBulk) UpdateCountry() *DeliveryAgencyUpsertBulk {
	return u.Update(func(s *DeliveryAgencyUpsert) {
		s.UpdateCountry()
	})
}

// SetVATReductionRate sets the "VAT_reduction_rate" field.
func (u *DeliveryAgencyUpsertBulk) SetVATReductionRate(v float64) *DeliveryAgencyUpsertBulk {
	return u.Update(func(s *DeliveryAgencyUpsert) {
		s.SetVATReductionRate(v)
	})
}

// AddVATReductionRate adds v to the "VAT_reduction_rate" field.
func (u *DeliveryAgencyUpsertBulk) AddVATReductionRate(v float64) *DeliveryAgencyUpsertBulk {
	return u.Update(func(s *DeliveryAgencyUpsert) {
		s.AddVATReductionRate(v)
	})
}

// UpdateVATReductionRate sets the "VAT_reduction_rate" field to the value that was provided on create.
func (u *DeliveryAgencyUpsertBulk) UpdateVATReductionRate() *DeliveryAgencyUpsertBulk {
	return u.Update(func(s *DeliveryAgencyUpsert) {
		s.UpdateVATReductionRate()
	})
}

// SetShippingFee sets the "shipping_fee" field.
func (u *DeliveryAgencyUpsertBulk) SetShippingFee(v *schema.AgencyShippingFee) *DeliveryAgencyUpsertBulk {
	return u.Update(func(s *DeliveryAgencyUpsert) {
		s.SetShippingFee(v)
	})
}

// UpdateShippingFee sets the "shipping_fee" field to the value that was provided on create.
func (u *DeliveryAgencyUpsertBulk) UpdateShippingFee() *DeliveryAgencyUpsertBulk {
	return u.Update(func(s *DeliveryAgencyUpsert) {
		s.UpdateShippingFee()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeliveryAgencyUpsertBulk) SetUpdatedAt(v time.Time) *DeliveryAgencyUpsertBulk {
	return u.Update(func(s *DeliveryAgencyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeliveryAgencyUpsertBulk) UpdateUpdatedAt() *DeliveryAgencyUpsertBulk {
	return u.Update(func(s *DeliveryAgencyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DeliveryAgencyUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeliveryAgencyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeliveryAgencyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeliveryAgencyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
