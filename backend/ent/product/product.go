// Code generated by ent, DO NOT EDIT.

package product

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStoreName holds the string denoting the store_name field in the database.
	FieldStoreName = "store_name"
	// FieldBrand holds the string denoting the brand field in the database.
	FieldBrand = "brand"
	// FieldProductName holds the string denoting the product_name field in the database.
	FieldProductName = "product_name"
	// FieldProductImgURL holds the string denoting the product_img_url field in the database.
	FieldProductImgURL = "product_img_url"
	// FieldProductURL holds the string denoting the product_url field in the database.
	FieldProductURL = "product_url"
	// FieldCurrencyCode holds the string denoting the currency_code field in the database.
	FieldCurrencyCode = "currency_code"
	// FieldRetailPrice holds the string denoting the retail_price field in the database.
	FieldRetailPrice = "retail_price"
	// FieldSalePrice holds the string denoting the sale_price field in the database.
	FieldSalePrice = "sale_price"
	// FieldIsSale holds the string denoting the is_sale field in the database.
	FieldIsSale = "is_sale"
	// FieldMadeIn holds the string denoting the made_in field in the database.
	FieldMadeIn = "made_in"
	// FieldKorBrand holds the string denoting the kor_brand field in the database.
	FieldKorBrand = "kor_brand"
	// FieldKorProductName holds the string denoting the kor_product_name field in the database.
	FieldKorProductName = "kor_product_name"
	// FieldProductID holds the string denoting the product_id field in the database.
	FieldProductID = "product_id"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldColor holds the string denoting the color field in the database.
	FieldColor = "color"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldCategorySpec holds the string denoting the category_spec field in the database.
	FieldCategorySpec = "category_spec"
	// FieldSoldOut holds the string denoting the sold_out field in the database.
	FieldSoldOut = "sold_out"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeStore holds the string denoting the store edge name in mutations.
	EdgeStore = "store"
	// StoreFieldID holds the string denoting the ID field of the Store.
	StoreFieldID = "store_name"
	// Table holds the table name of the product in the database.
	Table = "products"
	// StoreTable is the table that holds the store relation/edge.
	StoreTable = "products"
	// StoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoreInverseTable = "stores"
	// StoreColumn is the table column denoting the store relation/edge.
	StoreColumn = "store_name"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldStoreName,
	FieldBrand,
	FieldProductName,
	FieldProductImgURL,
	FieldProductURL,
	FieldCurrencyCode,
	FieldRetailPrice,
	FieldSalePrice,
	FieldIsSale,
	FieldMadeIn,
	FieldKorBrand,
	FieldKorProductName,
	FieldProductID,
	FieldGender,
	FieldColor,
	FieldCategory,
	FieldCategorySpec,
	FieldSoldOut,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSoldOut holds the default value on creation for the "sold_out" field.
	DefaultSoldOut bool
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Product queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStoreName orders the results by the store_name field.
func ByStoreName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoreName, opts...).ToFunc()
}

// ByBrand orders the results by the brand field.
func ByBrand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrand, opts...).ToFunc()
}

// ByProductName orders the results by the product_name field.
func ByProductName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductName, opts...).ToFunc()
}

// ByProductImgURL orders the results by the product_img_url field.
func ByProductImgURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductImgURL, opts...).ToFunc()
}

// ByProductURL orders the results by the product_url field.
func ByProductURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductURL, opts...).ToFunc()
}

// ByCurrencyCode orders the results by the currency_code field.
func ByCurrencyCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrencyCode, opts...).ToFunc()
}

// ByRetailPrice orders the results by the retail_price field.
func ByRetailPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetailPrice, opts...).ToFunc()
}

// BySalePrice orders the results by the sale_price field.
func BySalePrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalePrice, opts...).ToFunc()
}

// ByIsSale orders the results by the is_sale field.
func ByIsSale(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSale, opts...).ToFunc()
}

// ByMadeIn orders the results by the made_in field.
func ByMadeIn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMadeIn, opts...).ToFunc()
}

// ByKorBrand orders the results by the kor_brand field.
func ByKorBrand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKorBrand, opts...).ToFunc()
}

// ByKorProductName orders the results by the kor_product_name field.
func ByKorProductName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKorProductName, opts...).ToFunc()
}

// ByProductID orders the results by the product_id field.
func ByProductID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductID, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByColor orders the results by the color field.
func ByColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColor, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByCategorySpec orders the results by the category_spec field.
func ByCategorySpec(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategorySpec, opts...).ToFunc()
}

// BySoldOut orders the results by the sold_out field.
func BySoldOut(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSoldOut, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStoreField orders the results by store field.
func ByStoreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStoreStep(), sql.OrderByField(field, opts...))
	}
}
func newStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StoreInverseTable, StoreFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StoreTable, StoreColumn),
	)
}
